''' <summary>
''' This class demonstrates the spectrum of class members available in 
''' Visual Basic, and how XML comments are generated by the Code Editor.
''' </summary>
''' <remarks>The members of this class are not implemented, as that is
''' not relevat to the example.
''' </remarks>
Public Class Automobile

    ''' <summary>
    ''' Two options are available for the engine.
    ''' </summary>
    ''' <remarks></remarks>
    Public Enum EngineOption
        Road = 1500
        Towing = 2200
    End Enum


    ''' <summary>
    ''' This creates a new instance of Automobile with the factory
    ''' standard package.
    ''' </summary>
    ''' <remarks>This method is not implemented.</remarks>
    Public Sub New()

    End Sub

    ''' <summary>
    ''' This creates a new instance of Automobile with the customer
    ''' selected engine option.
    ''' </summary>
    ''' <param name="engineSize">Available engine options.</param>
    ''' <remarks>Use this constructor for the special engine packages.</remarks>
    Public Sub New(ByVal engineSize As EngineOption)

    End Sub

    ''' <summary>
    ''' Private variable for the Model property.
    ''' </summary>
    ''' <remarks>In the future, this could be limited to one of several choices.</remarks>
    Private modelValue As String

    ''' <summary>
    ''' The name of the automobile model.
    ''' </summary>
    ''' <value>Suggested values are Standard, Deluxe, and Luxury. </value>
    ''' <remarks></remarks>
    Public Property Model() As String
        Get
            Return modelValue
        End Get
        Set(ByVal value As String)
            modelValue = value
        End Set
    End Property

    ''' <summary>
    ''' Call this method if the customer asks for an engine change after
    ''' the original order.
    ''' </summary>
    ''' <param name="engineSize">Available engine options.</param>
    ''' <remarks>This can only be called before the car is 
    ''' delivered.</remarks>
    Public Sub Upgrade(ByVal engineSize As EngineOption)

    End Sub

    ''' <summary>
    ''' Maximum towing weight depends on the model and the engine.
    ''' </summary>
    ''' <returns>Number of pounds the automobile can tow safely.</returns>
    ''' <remarks>None.</remarks>
    Public Function CalculateMaxTowing() As Integer

    End Function

    ''' <summary>
    ''' Returns True if the automobile can two the number of pounds specified.
    ''' </summary>
    ''' <param name="pounds">Pounds the customer wants to tow.</param>
    ''' <returns>True if the automobile can tow the weight.</returns>
    ''' <remarks>None.</remarks>
    Public Function WillItTow(ByVal pounds As Integer) As Boolean

    End Function

    ''' <summary>
    ''' Raised if the customer makes a towing request (WillItTwo) more than
    ''' 50 percent of the maximum.
    ''' </summary>
    ''' <param name="sender">Automobile being queried.</param>
    ''' <param name="e">EventArgs</param>
    ''' <remarks>None.</remarks>
    Public Event NeedsTuneUp(ByVal sender As Object, ByVal e As EventArgs)

    ''' <summary>
    ''' Method to use for rotating the tires.
    ''' </summary>
    ''' <remarks>Allows different shops to use different rotation patterns.</remarks>
    Public Delegate Sub RotateTires()


    ''' <summary>
    ''' Method for changing the spark plugs.
    ''' </summary>
    ''' <param name="plugs">Description of the new plugs.</param>
    ''' <returns>True if the replacement was successful.</returns>
    ''' <remarks>Allows different shops to use different methods and plugs.</remarks>
    Public Delegate Function ReplaceSparkPlugs(ByVal plugs As String) As Boolean


End Class
