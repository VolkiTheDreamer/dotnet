'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1373
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace nwind
    <System.Data.Linq.Mapping.DatabaseAttribute(Name:="NORTHWND")> _
    Partial Public Class Northwind
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource

#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub InsertActiveProductsFedarated(ByVal instance As ActiveProductsFedarated)
        End Sub
        Partial Private Sub UpdateActiveProductsFedarated(ByVal instance As ActiveProductsFedarated)
        End Sub
        Partial Private Sub DeleteActiveProductsFedarated(ByVal instance As ActiveProductsFedarated)
        End Sub
        Partial Private Sub InsertAddressSplit(ByVal instance As AddressSplit)
        End Sub
        Partial Private Sub UpdateAddressSplit(ByVal instance As AddressSplit)
        End Sub
        Partial Private Sub DeleteAddressSplit(ByVal instance As AddressSplit)
        End Sub
        Partial Private Sub InsertBaseContactSplit(ByVal instance As BaseContactSplit)
        End Sub
        Partial Private Sub UpdateBaseContactSplit(ByVal instance As BaseContactSplit)
        End Sub
        Partial Private Sub DeleteBaseContactSplit(ByVal instance As BaseContactSplit)
        End Sub
        Partial Private Sub InsertBaseProductsFedarated(ByVal instance As BaseProductsFedarated)
        End Sub
        Partial Private Sub UpdateBaseProductsFedarated(ByVal instance As BaseProductsFedarated)
        End Sub
        Partial Private Sub DeleteBaseProductsFedarated(ByVal instance As BaseProductsFedarated)
        End Sub
        Partial Private Sub InsertCategories(ByVal instance As Categories)
        End Sub
        Partial Private Sub UpdateCategories(ByVal instance As Categories)
        End Sub
        Partial Private Sub DeleteCategories(ByVal instance As Categories)
        End Sub
        Partial Private Sub InsertContactNameSplit(ByVal instance As ContactNameSplit)
        End Sub
        Partial Private Sub UpdateContactNameSplit(ByVal instance As ContactNameSplit)
        End Sub
        Partial Private Sub DeleteContactNameSplit(ByVal instance As ContactNameSplit)
        End Sub
        Partial Private Sub InsertContacts(ByVal instance As Contacts)
        End Sub
        Partial Private Sub UpdateContacts(ByVal instance As Contacts)
        End Sub
        Partial Private Sub DeleteContacts(ByVal instance As Contacts)
        End Sub
        Partial Private Sub InsertCustomerCustomerDemo(ByVal instance As CustomerCustomerDemo)
        End Sub
        Partial Private Sub UpdateCustomerCustomerDemo(ByVal instance As CustomerCustomerDemo)
        End Sub
        Partial Private Sub DeleteCustomerCustomerDemo(ByVal instance As CustomerCustomerDemo)
        End Sub
        Partial Private Sub InsertCustomerDemographics(ByVal instance As CustomerDemographics)
        End Sub
        Partial Private Sub UpdateCustomerDemographics(ByVal instance As CustomerDemographics)
        End Sub
        Partial Private Sub DeleteCustomerDemographics(ByVal instance As CustomerDemographics)
        End Sub
        Partial Private Sub InsertCustomers(ByVal instance As Customers)
        End Sub
        Partial Private Sub UpdateCustomers(ByVal instance As Customers)
        End Sub
        Partial Private Sub DeleteCustomers(ByVal instance As Customers)
        End Sub
        Partial Private Sub InsertDiscontinuedProductsFedarated(ByVal instance As DiscontinuedProductsFedarated)
        End Sub
        Partial Private Sub UpdateDiscontinuedProductsFedarated(ByVal instance As DiscontinuedProductsFedarated)
        End Sub
        Partial Private Sub DeleteDiscontinuedProductsFedarated(ByVal instance As DiscontinuedProductsFedarated)
        End Sub
        Partial Private Sub InsertEmployees(ByVal instance As Employees)
        End Sub
        Partial Private Sub UpdateEmployees(ByVal instance As Employees)
        End Sub
        Partial Private Sub DeleteEmployees(ByVal instance As Employees)
        End Sub
        Partial Private Sub InsertEmployeeSplit(ByVal instance As EmployeeSplit)
        End Sub
        Partial Private Sub UpdateEmployeeSplit(ByVal instance As EmployeeSplit)
        End Sub
        Partial Private Sub DeleteEmployeeSplit(ByVal instance As EmployeeSplit)
        End Sub
        Partial Private Sub InsertEmployeeTerritories(ByVal instance As EmployeeTerritories)
        End Sub
        Partial Private Sub UpdateEmployeeTerritories(ByVal instance As EmployeeTerritories)
        End Sub
        Partial Private Sub DeleteEmployeeTerritories(ByVal instance As EmployeeTerritories)
        End Sub
        Partial Private Sub InsertOrderDetails(ByVal instance As OrderDetails)
        End Sub
        Partial Private Sub UpdateOrderDetails(ByVal instance As OrderDetails)
        End Sub
        Partial Private Sub DeleteOrderDetails(ByVal instance As OrderDetails)
        End Sub
        Partial Private Sub InsertOrders(ByVal instance As Orders)
        End Sub
        Partial Private Sub UpdateOrders(ByVal instance As Orders)
        End Sub
        Partial Private Sub DeleteOrders(ByVal instance As Orders)
        End Sub
        Partial Private Sub InsertProducts(ByVal instance As Products)
        End Sub
        Partial Private Sub UpdateProducts(ByVal instance As Products)
        End Sub
        Partial Private Sub DeleteProducts(ByVal instance As Products)
        End Sub
        Partial Private Sub InsertRegion(ByVal instance As Region)
        End Sub
        Partial Private Sub UpdateRegion(ByVal instance As Region)
        End Sub
        Partial Private Sub DeleteRegion(ByVal instance As Region)
        End Sub
        Partial Private Sub InsertShippers(ByVal instance As Shippers)
        End Sub
        Partial Private Sub UpdateShippers(ByVal instance As Shippers)
        End Sub
        Partial Private Sub DeleteShippers(ByVal instance As Shippers)
        End Sub
        Partial Private Sub InsertSuppliers(ByVal instance As Suppliers)
        End Sub
        Partial Private Sub UpdateSuppliers(ByVal instance As Suppliers)
        End Sub
        Partial Private Sub DeleteSuppliers(ByVal instance As Suppliers)
        End Sub
        Partial Private Sub InsertTerritories(ByVal instance As Territories)
        End Sub
        Partial Private Sub UpdateTerritories(ByVal instance As Territories)
        End Sub
        Partial Private Sub DeleteTerritories(ByVal instance As Territories)
        End Sub
#End Region

        Shared Sub New()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property ActiveProductsFedarated() As System.Data.Linq.Table(Of ActiveProductsFedarated)
            Get
                Return Me.GetTable(Of ActiveProductsFedarated)()
            End Get
        End Property

        Public ReadOnly Property AddressSplit() As System.Data.Linq.Table(Of AddressSplit)
            Get
                Return Me.GetTable(Of AddressSplit)()
            End Get
        End Property

        Public ReadOnly Property BaseContactSplit() As System.Data.Linq.Table(Of BaseContactSplit)
            Get
                Return Me.GetTable(Of BaseContactSplit)()
            End Get
        End Property

        Public ReadOnly Property BaseProductsFedarated() As System.Data.Linq.Table(Of BaseProductsFedarated)
            Get
                Return Me.GetTable(Of BaseProductsFedarated)()
            End Get
        End Property

        Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Categories)
            Get
                Return Me.GetTable(Of Categories)()
            End Get
        End Property

        Public ReadOnly Property ContactNameSplit() As System.Data.Linq.Table(Of ContactNameSplit)
            Get
                Return Me.GetTable(Of ContactNameSplit)()
            End Get
        End Property

        Public ReadOnly Property Contacts() As System.Data.Linq.Table(Of Contacts)
            Get
                Return Me.GetTable(Of Contacts)()
            End Get
        End Property

        Public ReadOnly Property CustomerCustomerDemo() As System.Data.Linq.Table(Of CustomerCustomerDemo)
            Get
                Return Me.GetTable(Of CustomerCustomerDemo)()
            End Get
        End Property

        Public ReadOnly Property CustomerDemographics() As System.Data.Linq.Table(Of CustomerDemographics)
            Get
                Return Me.GetTable(Of CustomerDemographics)()
            End Get
        End Property

        Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customers)
            Get
                Return Me.GetTable(Of Customers)()
            End Get
        End Property

        Public ReadOnly Property DiscontinuedProductsFedarated() As System.Data.Linq.Table(Of DiscontinuedProductsFedarated)
            Get
                Return Me.GetTable(Of DiscontinuedProductsFedarated)()
            End Get
        End Property

        Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employees)
            Get
                Return Me.GetTable(Of Employees)()
            End Get
        End Property

        Public ReadOnly Property EmployeeSplit() As System.Data.Linq.Table(Of EmployeeSplit)
            Get
                Return Me.GetTable(Of EmployeeSplit)()
            End Get
        End Property

        Public ReadOnly Property EmployeeTerritories() As System.Data.Linq.Table(Of EmployeeTerritories)
            Get
                Return Me.GetTable(Of EmployeeTerritories)()
            End Get
        End Property

        Public ReadOnly Property OrderDetails() As System.Data.Linq.Table(Of OrderDetails)
            Get
                Return Me.GetTable(Of OrderDetails)()
            End Get
        End Property

        Public ReadOnly Property Orders() As System.Data.Linq.Table(Of Orders)
            Get
                Return Me.GetTable(Of Orders)()
            End Get
        End Property

        Public ReadOnly Property Products() As System.Data.Linq.Table(Of Products)
            Get
                Return Me.GetTable(Of Products)()
            End Get
        End Property

        Public ReadOnly Property Region() As System.Data.Linq.Table(Of Region)
            Get
                Return Me.GetTable(Of Region)()
            End Get
        End Property

        Public ReadOnly Property Shippers() As System.Data.Linq.Table(Of Shippers)
            Get
                Return Me.GetTable(Of Shippers)()
            End Get
        End Property

        Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Suppliers)
            Get
                Return Me.GetTable(Of Suppliers)()
            End Get
        End Property

        Public ReadOnly Property Territories() As System.Data.Linq.Table(Of Territories)
            Get
                Return Me.GetTable(Of Territories)()
            End Get
        End Property
    End Class

    <Table(Name:="dbo.ActiveProductsFedarated")> _
    Partial Public Class ActiveProductsFedarated
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ProductID As Integer

        Private _ProductName As String

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnProductNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnProductNameChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
        End Sub

        <Column(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property ProductID() As Integer
            Get
                Return Me._ProductID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ProductID = Value) _
                   = False) Then
                    Me.OnProductIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ProductID = Value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property ProductName() As String
            Get
                Return Me._ProductName
            End Get
            Set(ByVal value As String)
                If ((Me._ProductName = Value) _
                   = False) Then
                    Me.OnProductNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ProductName = Value
                    Me.SendPropertyChanged("ProductName")
                    Me.OnProductNameChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.AddressSplit")> _
    Partial Public Class AddressSplit
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _ContactType As String

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnContactTypeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactTypeChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
        End Sub

        <Column(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ID = Value) _
                   = False) Then
                    Me.OnIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ID = Value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Address", DbType:="NVarChar(60)")> _
        Public Property Address() As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)
                If ((Me._Address = Value) _
                   = False) Then
                    Me.OnAddressChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Address = Value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_City", DbType:="NVarChar(15)")> _
        Public Property City() As String
            Get
                Return Me._City
            End Get
            Set(ByVal value As String)
                If ((Me._City = Value) _
                   = False) Then
                    Me.OnCityChanging(Value)
                    Me.SendPropertyChanging()
                    Me._City = Value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Region", DbType:="NVarChar(15)")> _
        Public Property Region() As String
            Get
                Return Me._Region
            End Get
            Set(ByVal value As String)
                If ((Me._Region = Value) _
                   = False) Then
                    Me.OnRegionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Region = Value
                    Me.SendPropertyChanged("Region")
                    Me.OnRegionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PostalCode", DbType:="NVarChar(50)")> _
        Public Property PostalCode() As String
            Get
                Return Me._PostalCode
            End Get
            Set(ByVal value As String)
                If ((Me._PostalCode = Value) _
                   = False) Then
                    Me.OnPostalCodeChanging(Value)
                    Me.SendPropertyChanging()
                    Me._PostalCode = Value
                    Me.SendPropertyChanged("PostalCode")
                    Me.OnPostalCodeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Country", DbType:="NVarChar(15)")> _
        Public Property Country() As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)
                If ((Me._Country = Value) _
                   = False) Then
                    Me.OnCountryChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Country = Value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactType", DbType:="NVarChar(50)")> _
        Public Property ContactType() As String
            Get
                Return Me._ContactType
            End Get
            Set(ByVal value As String)
                If ((Me._ContactType = Value) _
                   = False) Then
                    Me.OnContactTypeChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactType = Value
                    Me.SendPropertyChanged("ContactType")
                    Me.OnContactTypeChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.BaseContactSplit")> _
    Partial Public Class BaseContactSplit
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _CompanyName As String

        Private _ContactName As String

        Private _Phone As String

        Private _ContactType As String

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCompanyNameChanged()
        End Sub
        Partial Private Sub OnContactNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactNameChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
        Partial Private Sub OnContactTypeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactTypeChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
        End Sub

        <Column(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ID = Value) _
                   = False) Then
                    Me.OnIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ID = Value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property CompanyName() As String
            Get
                Return Me._CompanyName
            End Get
            Set(ByVal value As String)
                If ((Me._CompanyName = Value) _
                   = False) Then
                    Me.OnCompanyNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CompanyName = Value
                    Me.SendPropertyChanged("CompanyName")
                    Me.OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactName", DbType:="NVarChar(30)")> _
        Public Property ContactName() As String
            Get
                Return Me._ContactName
            End Get
            Set(ByVal value As String)
                If ((Me._ContactName = Value) _
                   = False) Then
                    Me.OnContactNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactName = Value
                    Me.SendPropertyChanged("ContactName")
                    Me.OnContactNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
        Public Property Phone() As String
            Get
                Return Me._Phone
            End Get
            Set(ByVal value As String)
                If ((Me._Phone = Value) _
                   = False) Then
                    Me.OnPhoneChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Phone = Value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactType", DbType:="NVarChar(50)")> _
        Public Property ContactType() As String
            Get
                Return Me._ContactType
            End Get
            Set(ByVal value As String)
                If ((Me._ContactType = Value) _
                   = False) Then
                    Me.OnContactTypeChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactType = Value
                    Me.SendPropertyChanged("ContactType")
                    Me.OnContactTypeChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.BaseProductsFedarated")> _
    Partial Public Class BaseProductsFedarated
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ProductID As Integer

        Private _ProductName As String

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnProductNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnProductNameChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
        End Sub

        <Column(Storage:="_ProductID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property ProductID() As Integer
            Get
                Return Me._ProductID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ProductID = Value) _
                   = False) Then
                    Me.OnProductIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ProductID = Value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property ProductName() As String
            Get
                Return Me._ProductName
            End Get
            Set(ByVal value As String)
                If ((Me._ProductName = Value) _
                   = False) Then
                    Me.OnProductNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ProductName = Value
                    Me.SendPropertyChanged("ProductName")
                    Me.OnProductNameChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.Categories")> _
    Partial Public Class Categories
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _CategoryID As Integer

        Private _CategoryName As String

        Private _Description As String

        Private _Picture() As Byte

        Private _Products As EntitySet(Of Products)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnCategoryIDChanged()
        End Sub
        Partial Private Sub OnCategoryNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCategoryNameChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
        Partial Private Sub OnPictureChanging(ByVal value As Byte())
        End Sub
        Partial Private Sub OnPictureChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._Products = New EntitySet(Of Products)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
        End Sub

        <Column(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property CategoryID() As Integer
            Get
                Return Me._CategoryID
            End Get
            Set(ByVal value As Integer)
                If ((Me._CategoryID = Value) _
                   = False) Then
                    Me.OnCategoryIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CategoryID = Value
                    Me.SendPropertyChanged("CategoryID")
                    Me.OnCategoryIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)> _
        Public Property CategoryName() As String
            Get
                Return Me._CategoryName
            End Get
            Set(ByVal value As String)
                If ((Me._CategoryName = Value) _
                   = False) Then
                    Me.OnCategoryNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CategoryName = Value
                    Me.SendPropertyChanged("CategoryName")
                    Me.OnCategoryNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
        Public Property Description() As String
            Get
                Return Me._Description
            End Get
            Set(ByVal value As String)
                If ((Me._Description = Value) _
                   = False) Then
                    Me.OnDescriptionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Description = Value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
        Public Property Picture() As Byte()
            Get
                Return Me._Picture
            End Get
            Set(ByVal value As Byte())
                If ((Me._Picture Is Value) _
                   = False) Then
                    Me.OnPictureChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Picture = Value
                    Me.SendPropertyChanged("Picture")
                    Me.OnPictureChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Products_Categories", Storage:="_Products", OtherKey:="CategoryID", DeleteRule:="NO ACTION")> _
        Public Property Products() As EntitySet(Of Products)
            Get
                Return Me._Products
            End Get
            Set(ByVal value As EntitySet(Of Products))
                Me._Products.Assign(Value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Products(ByVal entity As Products)
            Me.SendPropertyChanging()
            entity.Categories = Me
            Me.SendPropertyChanged("Products")
        End Sub

        Private Sub detach_Products(ByVal entity As Products)
            Me.SendPropertyChanging()
            entity.Categories = Nothing
            Me.SendPropertyChanged("Products")
        End Sub
    End Class

    <Table(Name:="dbo.ContactNameSplit")> _
    Partial Public Class ContactNameSplit
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Name As String

        Private _Title As String

        Private _Fax As String

        Private _ContactType As String

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnNameChanged()
        End Sub
        Partial Private Sub OnTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTitleChanged()
        End Sub
        Partial Private Sub OnFaxChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFaxChanged()
        End Sub
        Partial Private Sub OnContactTypeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactTypeChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
        End Sub

        <Column(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ID = Value) _
                   = False) Then
                    Me.OnIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ID = Value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Name", DbType:="NVarChar(30)")> _
        Public Property Name() As String
            Get
                Return Me._Name
            End Get
            Set(ByVal value As String)
                If ((Me._Name = Value) _
                   = False) Then
                    Me.OnNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Name = Value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Title", DbType:="NVarChar(30)")> _
        Public Property Title() As String
            Get
                Return Me._Title
            End Get
            Set(ByVal value As String)
                If ((Me._Title = Value) _
                   = False) Then
                    Me.OnTitleChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Title = Value
                    Me.SendPropertyChanged("Title")
                    Me.OnTitleChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
        Public Property Fax() As String
            Get
                Return Me._Fax
            End Get
            Set(ByVal value As String)
                If ((Me._Fax = Value) _
                   = False) Then
                    Me.OnFaxChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Fax = Value
                    Me.SendPropertyChanged("Fax")
                    Me.OnFaxChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactType", DbType:="NVarChar(50)")> _
        Public Property ContactType() As String
            Get
                Return Me._ContactType
            End Get
            Set(ByVal value As String)
                If ((Me._ContactType = Value) _
                   = False) Then
                    Me.OnContactTypeChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactType = Value
                    Me.SendPropertyChanged("ContactType")
                    Me.OnContactTypeChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.Contacts")> _
    Partial Public Class Contacts
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ContactID As Integer

        Private _ContactType As String

        Private _CompanyName As String

        Private _ContactName As String

        Private _ContactTitle As String

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _Phone As String

        Private _Extension As String

        Private _Fax As String

        Private _HomePage As String

        Private _PhotoPath As String

        Private _Photo() As Byte

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnContactIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnContactIDChanged()
        End Sub
        Partial Private Sub OnContactTypeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactTypeChanged()
        End Sub
        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCompanyNameChanged()
        End Sub
        Partial Private Sub OnContactNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactNameChanged()
        End Sub
        Partial Private Sub OnContactTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactTitleChanged()
        End Sub
        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
        Partial Private Sub OnExtensionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnExtensionChanged()
        End Sub
        Partial Private Sub OnFaxChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFaxChanged()
        End Sub
        Partial Private Sub OnHomePageChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnHomePageChanged()
        End Sub
        Partial Private Sub OnPhotoPathChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhotoPathChanged()
        End Sub
        Partial Private Sub OnPhotoChanging(ByVal value As Byte())
        End Sub
        Partial Private Sub OnPhotoChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
        End Sub

        <Column(Storage:="_ContactID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property ContactID() As Integer
            Get
                Return Me._ContactID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ContactID = Value) _
                   = False) Then
                    Me.OnContactIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactID = Value
                    Me.SendPropertyChanged("ContactID")
                    Me.OnContactIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactType", DbType:="NVarChar(50)")> _
        Public Property ContactType() As String
            Get
                Return Me._ContactType
            End Get
            Set(ByVal value As String)
                If ((Me._ContactType = Value) _
                   = False) Then
                    Me.OnContactTypeChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactType = Value
                    Me.SendPropertyChanged("ContactType")
                    Me.OnContactTypeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property CompanyName() As String
            Get
                Return Me._CompanyName
            End Get
            Set(ByVal value As String)
                If ((Me._CompanyName = Value) _
                   = False) Then
                    Me.OnCompanyNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CompanyName = Value
                    Me.SendPropertyChanged("CompanyName")
                    Me.OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactName", DbType:="NVarChar(30)")> _
        Public Property ContactName() As String
            Get
                Return Me._ContactName
            End Get
            Set(ByVal value As String)
                If ((Me._ContactName = Value) _
                   = False) Then
                    Me.OnContactNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactName = Value
                    Me.SendPropertyChanged("ContactName")
                    Me.OnContactNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
        Public Property ContactTitle() As String
            Get
                Return Me._ContactTitle
            End Get
            Set(ByVal value As String)
                If ((Me._ContactTitle = Value) _
                   = False) Then
                    Me.OnContactTitleChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactTitle = Value
                    Me.SendPropertyChanged("ContactTitle")
                    Me.OnContactTitleChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Address", DbType:="NVarChar(60)")> _
        Public Property Address() As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)
                If ((Me._Address = Value) _
                   = False) Then
                    Me.OnAddressChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Address = Value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_City", DbType:="NVarChar(15)")> _
        Public Property City() As String
            Get
                Return Me._City
            End Get
            Set(ByVal value As String)
                If ((Me._City = Value) _
                   = False) Then
                    Me.OnCityChanging(Value)
                    Me.SendPropertyChanging()
                    Me._City = Value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Region", DbType:="NVarChar(15)")> _
        Public Property Region() As String
            Get
                Return Me._Region
            End Get
            Set(ByVal value As String)
                If ((Me._Region = Value) _
                   = False) Then
                    Me.OnRegionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Region = Value
                    Me.SendPropertyChanged("Region")
                    Me.OnRegionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PostalCode", DbType:="NVarChar(10)")> _
        Public Property PostalCode() As String
            Get
                Return Me._PostalCode
            End Get
            Set(ByVal value As String)
                If ((Me._PostalCode = Value) _
                   = False) Then
                    Me.OnPostalCodeChanging(Value)
                    Me.SendPropertyChanging()
                    Me._PostalCode = Value
                    Me.SendPropertyChanged("PostalCode")
                    Me.OnPostalCodeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Country", DbType:="NVarChar(15)")> _
        Public Property Country() As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)
                If ((Me._Country = Value) _
                   = False) Then
                    Me.OnCountryChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Country = Value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
        Public Property Phone() As String
            Get
                Return Me._Phone
            End Get
            Set(ByVal value As String)
                If ((Me._Phone = Value) _
                   = False) Then
                    Me.OnPhoneChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Phone = Value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Extension", DbType:="NVarChar(4)")> _
        Public Property Extension() As String
            Get
                Return Me._Extension
            End Get
            Set(ByVal value As String)
                If ((Me._Extension = Value) _
                   = False) Then
                    Me.OnExtensionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Extension = Value
                    Me.SendPropertyChanged("Extension")
                    Me.OnExtensionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
        Public Property Fax() As String
            Get
                Return Me._Fax
            End Get
            Set(ByVal value As String)
                If ((Me._Fax = Value) _
                   = False) Then
                    Me.OnFaxChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Fax = Value
                    Me.SendPropertyChanged("Fax")
                    Me.OnFaxChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_HomePage", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
        Public Property HomePage() As String
            Get
                Return Me._HomePage
            End Get
            Set(ByVal value As String)
                If ((Me._HomePage = Value) _
                   = False) Then
                    Me.OnHomePageChanging(Value)
                    Me.SendPropertyChanging()
                    Me._HomePage = Value
                    Me.SendPropertyChanged("HomePage")
                    Me.OnHomePageChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PhotoPath", DbType:="NVarChar(255)")> _
        Public Property PhotoPath() As String
            Get
                Return Me._PhotoPath
            End Get
            Set(ByVal value As String)
                If ((Me._PhotoPath = Value) _
                   = False) Then
                    Me.OnPhotoPathChanging(Value)
                    Me.SendPropertyChanging()
                    Me._PhotoPath = Value
                    Me.SendPropertyChanged("PhotoPath")
                    Me.OnPhotoPathChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Photo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
        Public Property Photo() As Byte()
            Get
                Return Me._Photo
            End Get
            Set(ByVal value As Byte())
                If ((Me._Photo Is Value) _
                   = False) Then
                    Me.OnPhotoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Photo = Value
                    Me.SendPropertyChanged("Photo")
                    Me.OnPhotoChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.CustomerCustomerDemo")> _
    Partial Public Class CustomerCustomerDemo
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _CustomerID As String

        Private _CustomerTypeID As String

        Private _CustomerDemographics As EntityRef(Of CustomerDemographics)

        Private _Customers As EntityRef(Of Customers)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCustomerIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCustomerIDChanged()
        End Sub
        Partial Private Sub OnCustomerTypeIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCustomerTypeIDChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._CustomerDemographics = CType(Nothing, EntityRef(Of CustomerDemographics))
            Me._Customers = CType(Nothing, EntityRef(Of Customers))
        End Sub

        <Column(Storage:="_CustomerID", DbType:="NChar(5) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
        Public Property CustomerID() As String
            Get
                Return Me._CustomerID
            End Get
            Set(ByVal value As String)
                If ((Me._CustomerID = Value) _
                   = False) Then
                    If Me._Customers.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnCustomerIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CustomerID = Value
                    Me.SendPropertyChanged("CustomerID")
                    Me.OnCustomerIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CustomerTypeID", DbType:="NChar(10) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
        Public Property CustomerTypeID() As String
            Get
                Return Me._CustomerTypeID
            End Get
            Set(ByVal value As String)
                If ((Me._CustomerTypeID = Value) _
                   = False) Then
                    If Me._CustomerDemographics.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnCustomerTypeIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CustomerTypeID = Value
                    Me.SendPropertyChanged("CustomerTypeID")
                    Me.OnCustomerTypeIDChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_CustomerCustomerDemo", Storage:="_CustomerDemographics", ThisKey:="CustomerTypeID", IsForeignKey:=True)> _
        Public Property CustomerDemographics() As CustomerDemographics
            Get
                Return Me._CustomerDemographics.Entity
            End Get
            Set(ByVal value As CustomerDemographics)
                Dim previousValue As CustomerDemographics = Me._CustomerDemographics.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._CustomerDemographics.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._CustomerDemographics.Entity = Nothing
                        previousValue.CustomerCustomerDemo.Remove(Me)
                    End If
                    Me._CustomerDemographics.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.CustomerCustomerDemo.Add(Me)
                        Me._CustomerTypeID = Value.CustomerTypeID
                    Else
                        Me._CustomerTypeID = CType(Nothing, String)
                    End If
                    Me.SendPropertyChanged("CustomerDemographics")
                End If
            End Set
        End Property

        <Association(Name:="FK_CustomerCustomerDemo_Customers", Storage:="_Customers", ThisKey:="CustomerID", IsForeignKey:=True)> _
        Public Property Customers() As Customers
            Get
                Return Me._Customers.Entity
            End Get
            Set(ByVal value As Customers)
                Dim previousValue As Customers = Me._Customers.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Customers.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Customers.Entity = Nothing
                        previousValue.CustomerCustomerDemo.Remove(Me)
                    End If
                    Me._Customers.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.CustomerCustomerDemo.Add(Me)
                        Me._CustomerID = Value.CustomerID
                    Else
                        Me._CustomerID = CType(Nothing, String)
                    End If
                    Me.SendPropertyChanged("Customers")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.CustomerDemographics")> _
    Partial Public Class CustomerDemographics
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _CustomerTypeID As String

        Private _CustomerDesc As String

        Private _CustomerCustomerDemo As EntitySet(Of CustomerCustomerDemo)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCustomerTypeIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCustomerTypeIDChanged()
        End Sub
        Partial Private Sub OnCustomerDescChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCustomerDescChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._CustomerCustomerDemo = New EntitySet(Of CustomerCustomerDemo)(AddressOf Me.attach_CustomerCustomerDemo, AddressOf Me.detach_CustomerCustomerDemo)
        End Sub

        <Column(Storage:="_CustomerTypeID", DbType:="NChar(10) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
        Public Property CustomerTypeID() As String
            Get
                Return Me._CustomerTypeID
            End Get
            Set(ByVal value As String)
                If ((Me._CustomerTypeID = Value) _
                   = False) Then
                    Me.OnCustomerTypeIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CustomerTypeID = Value
                    Me.SendPropertyChanged("CustomerTypeID")
                    Me.OnCustomerTypeIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CustomerDesc", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
        Public Property CustomerDesc() As String
            Get
                Return Me._CustomerDesc
            End Get
            Set(ByVal value As String)
                If ((Me._CustomerDesc = Value) _
                   = False) Then
                    Me.OnCustomerDescChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CustomerDesc = Value
                    Me.SendPropertyChanged("CustomerDesc")
                    Me.OnCustomerDescChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_CustomerCustomerDemo", Storage:="_CustomerCustomerDemo", OtherKey:="CustomerTypeID", DeleteRule:="NO ACTION")> _
        Public Property CustomerCustomerDemo() As EntitySet(Of CustomerCustomerDemo)
            Get
                Return Me._CustomerCustomerDemo
            End Get
            Set(ByVal value As EntitySet(Of CustomerCustomerDemo))
                Me._CustomerCustomerDemo.Assign(Value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_CustomerCustomerDemo(ByVal entity As CustomerCustomerDemo)
            Me.SendPropertyChanging()
            entity.CustomerDemographics = Me
            Me.SendPropertyChanged("CustomerCustomerDemo")
        End Sub

        Private Sub detach_CustomerCustomerDemo(ByVal entity As CustomerCustomerDemo)
            Me.SendPropertyChanging()
            entity.CustomerDemographics = Nothing
            Me.SendPropertyChanged("CustomerCustomerDemo")
        End Sub
    End Class

    <Table(Name:="dbo.Customers")> _
    Partial Public Class Customers
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _CustomerID As String

        Private _CompanyName As String

        Private _ContactName As String

        Private _ContactTitle As String

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _Phone As String

        Private _Fax As String

        Private _CustomerCustomerDemo As EntitySet(Of CustomerCustomerDemo)

        Private _Orders As EntitySet(Of Orders)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCustomerIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCustomerIDChanged()
        End Sub
        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCompanyNameChanged()
        End Sub
        Partial Private Sub OnContactNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactNameChanged()
        End Sub
        Partial Private Sub OnContactTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactTitleChanged()
        End Sub
        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
        Partial Private Sub OnFaxChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFaxChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._CustomerCustomerDemo = New EntitySet(Of CustomerCustomerDemo)(AddressOf Me.attach_CustomerCustomerDemo, AddressOf Me.detach_CustomerCustomerDemo)
            Me._Orders = New EntitySet(Of Orders)(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
        End Sub

        <Column(Storage:="_CustomerID", DbType:="NChar(5) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
        Public Property CustomerID() As String
            Get
                Return Me._CustomerID
            End Get
            Set(ByVal value As String)
                If ((Me._CustomerID = Value) _
                   = False) Then
                    Me.OnCustomerIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CustomerID = Value
                    Me.SendPropertyChanged("CustomerID")
                    Me.OnCustomerIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property CompanyName() As String
            Get
                Return Me._CompanyName
            End Get
            Set(ByVal value As String)
                If ((Me._CompanyName = Value) _
                   = False) Then
                    Me.OnCompanyNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CompanyName = Value
                    Me.SendPropertyChanged("CompanyName")
                    Me.OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactName", DbType:="NVarChar(30)")> _
        Public Property ContactName() As String
            Get
                Return Me._ContactName
            End Get
            Set(ByVal value As String)
                If ((Me._ContactName = Value) _
                   = False) Then
                    Me.OnContactNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactName = Value
                    Me.SendPropertyChanged("ContactName")
                    Me.OnContactNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
        Public Property ContactTitle() As String
            Get
                Return Me._ContactTitle
            End Get
            Set(ByVal value As String)
                If ((Me._ContactTitle = Value) _
                   = False) Then
                    Me.OnContactTitleChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactTitle = Value
                    Me.SendPropertyChanged("ContactTitle")
                    Me.OnContactTitleChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Address", DbType:="NVarChar(60)")> _
        Public Property Address() As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)
                If ((Me._Address = Value) _
                   = False) Then
                    Me.OnAddressChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Address = Value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_City", DbType:="NVarChar(15)")> _
        Public Property City() As String
            Get
                Return Me._City
            End Get
            Set(ByVal value As String)
                If ((Me._City = Value) _
                   = False) Then
                    Me.OnCityChanging(Value)
                    Me.SendPropertyChanging()
                    Me._City = Value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Region", DbType:="NVarChar(15)")> _
        Public Property Region() As String
            Get
                Return Me._Region
            End Get
            Set(ByVal value As String)
                If ((Me._Region = Value) _
                   = False) Then
                    Me.OnRegionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Region = Value
                    Me.SendPropertyChanged("Region")
                    Me.OnRegionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PostalCode", DbType:="NVarChar(10)")> _
        Public Property PostalCode() As String
            Get
                Return Me._PostalCode
            End Get
            Set(ByVal value As String)
                If ((Me._PostalCode = Value) _
                   = False) Then
                    Me.OnPostalCodeChanging(Value)
                    Me.SendPropertyChanging()
                    Me._PostalCode = Value
                    Me.SendPropertyChanged("PostalCode")
                    Me.OnPostalCodeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Country", DbType:="NVarChar(15)")> _
        Public Property Country() As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)
                If ((Me._Country = Value) _
                   = False) Then
                    Me.OnCountryChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Country = Value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
        Public Property Phone() As String
            Get
                Return Me._Phone
            End Get
            Set(ByVal value As String)
                If ((Me._Phone = Value) _
                   = False) Then
                    Me.OnPhoneChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Phone = Value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
        Public Property Fax() As String
            Get
                Return Me._Fax
            End Get
            Set(ByVal value As String)
                If ((Me._Fax = Value) _
                   = False) Then
                    Me.OnFaxChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Fax = Value
                    Me.SendPropertyChanged("Fax")
                    Me.OnFaxChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_CustomerCustomerDemo_Customers", Storage:="_CustomerCustomerDemo", OtherKey:="CustomerID", DeleteRule:="NO ACTION")> _
        Public Property CustomerCustomerDemo() As EntitySet(Of CustomerCustomerDemo)
            Get
                Return Me._CustomerCustomerDemo
            End Get
            Set(ByVal value As EntitySet(Of CustomerCustomerDemo))
                Me._CustomerCustomerDemo.Assign(Value)
            End Set
        End Property

        <Association(Name:="FK_Orders_Customers", Storage:="_Orders", OtherKey:="CustomerID", DeleteRule:="NO ACTION")> _
        Public Property Orders() As EntitySet(Of Orders)
            Get
                Return Me._Orders
            End Get
            Set(ByVal value As EntitySet(Of Orders))
                Me._Orders.Assign(Value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_CustomerCustomerDemo(ByVal entity As CustomerCustomerDemo)
            Me.SendPropertyChanging()
            entity.Customers = Me
            Me.SendPropertyChanged("CustomerCustomerDemo")
        End Sub

        Private Sub detach_CustomerCustomerDemo(ByVal entity As CustomerCustomerDemo)
            Me.SendPropertyChanging()
            entity.Customers = Nothing
            Me.SendPropertyChanged("CustomerCustomerDemo")
        End Sub

        Private Sub attach_Orders(ByVal entity As Orders)
            Me.SendPropertyChanging()
            entity.Customers = Me
            Me.SendPropertyChanged("Orders")
        End Sub

        Private Sub detach_Orders(ByVal entity As Orders)
            Me.SendPropertyChanging()
            entity.Customers = Nothing
            Me.SendPropertyChanged("Orders")
        End Sub
    End Class

    <Table(Name:="dbo.DiscontinuedProductsFedarated")> _
    Partial Public Class DiscontinuedProductsFedarated
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ProductID As Integer

        Private _ProductName As String

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnProductNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnProductNameChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
        End Sub

        <Column(Storage:="_ProductID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property ProductID() As Integer
            Get
                Return Me._ProductID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ProductID = Value) _
                   = False) Then
                    Me.OnProductIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ProductID = Value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property ProductName() As String
            Get
                Return Me._ProductName
            End Get
            Set(ByVal value As String)
                If ((Me._ProductName = Value) _
                   = False) Then
                    Me.OnProductNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ProductName = Value
                    Me.SendPropertyChanged("ProductName")
                    Me.OnProductNameChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.Employees")> _
    Partial Public Class Employees
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _EmployeeID As Integer

        Private _LastName As String

        Private _FirstName As String

        Private _Title As String

        Private _TitleOfCourtesy As String

        Private _BirthDate As System.Nullable(Of Date)

        Private _HireDate As System.Nullable(Of Date)

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _HomePhone As String

        Private _Extension As String

        Private _Photo() As Byte

        Private _Notes As String

        Private _ReportsTo As System.Nullable(Of Integer)

        Private _PhotoPath As String

        Private _ReportsToEmployees As EntityRef(Of Employees)

        Private _Employee As EntitySet(Of Employees)

        Private _EmployeeTerritories As EntitySet(Of EmployeeTerritories)

        Private _Orders As EntitySet(Of Orders)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnEmployeeIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnEmployeeIDChanged()
        End Sub
        Partial Private Sub OnLastNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnLastNameChanged()
        End Sub
        Partial Private Sub OnFirstNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFirstNameChanged()
        End Sub
        Partial Private Sub OnTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTitleChanged()
        End Sub
        Partial Private Sub OnTitleOfCourtesyChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTitleOfCourtesyChanged()
        End Sub
        Partial Private Sub OnBirthDateChanging(ByVal value As System.Nullable(Of Date))
        End Sub
        Partial Private Sub OnBirthDateChanged()
        End Sub
        Partial Private Sub OnHireDateChanging(ByVal value As System.Nullable(Of Date))
        End Sub
        Partial Private Sub OnHireDateChanged()
        End Sub
        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnHomePhoneChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnHomePhoneChanged()
        End Sub
        Partial Private Sub OnExtensionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnExtensionChanged()
        End Sub
        Partial Private Sub OnPhotoChanging(ByVal value As Byte())
        End Sub
        Partial Private Sub OnPhotoChanged()
        End Sub
        Partial Private Sub OnNotesChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnNotesChanged()
        End Sub
        Partial Private Sub OnReportsToChanging(ByVal value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnReportsToChanged()
        End Sub
        Partial Private Sub OnPhotoPathChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhotoPathChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._ReportsToEmployees = CType(Nothing, EntityRef(Of Employees))
            Me._Employee = New EntitySet(Of Employees)(AddressOf Me.attach_Employee, AddressOf Me.detach_Employee)
            Me._EmployeeTerritories = New EntitySet(Of EmployeeTerritories)(AddressOf Me.attach_EmployeeTerritories, AddressOf Me.detach_EmployeeTerritories)
            Me._Orders = New EntitySet(Of Orders)(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
        End Sub

        <Column(Storage:="_EmployeeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property EmployeeID() As Integer
            Get
                Return Me._EmployeeID
            End Get
            Set(ByVal value As Integer)
                If ((Me._EmployeeID = Value) _
                   = False) Then
                    Me.OnEmployeeIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._EmployeeID = Value
                    Me.SendPropertyChanged("EmployeeID")
                    Me.OnEmployeeIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_LastName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=False)> _
        Public Property LastName() As String
            Get
                Return Me._LastName
            End Get
            Set(ByVal value As String)
                If ((Me._LastName = Value) _
                   = False) Then
                    Me.OnLastNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._LastName = Value
                    Me.SendPropertyChanged("LastName")
                    Me.OnLastNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_FirstName", DbType:="NVarChar(10) NOT NULL", CanBeNull:=False)> _
        Public Property FirstName() As String
            Get
                Return Me._FirstName
            End Get
            Set(ByVal value As String)
                If ((Me._FirstName = Value) _
                   = False) Then
                    Me.OnFirstNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._FirstName = Value
                    Me.SendPropertyChanged("FirstName")
                    Me.OnFirstNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Title", DbType:="NVarChar(30)")> _
        Public Property Title() As String
            Get
                Return Me._Title
            End Get
            Set(ByVal value As String)
                If ((Me._Title = Value) _
                   = False) Then
                    Me.OnTitleChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Title = Value
                    Me.SendPropertyChanged("Title")
                    Me.OnTitleChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_TitleOfCourtesy", DbType:="NVarChar(25)")> _
        Public Property TitleOfCourtesy() As String
            Get
                Return Me._TitleOfCourtesy
            End Get
            Set(ByVal value As String)
                If ((Me._TitleOfCourtesy = Value) _
                   = False) Then
                    Me.OnTitleOfCourtesyChanging(Value)
                    Me.SendPropertyChanging()
                    Me._TitleOfCourtesy = Value
                    Me.SendPropertyChanged("TitleOfCourtesy")
                    Me.OnTitleOfCourtesyChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_BirthDate", DbType:="DateTime")> _
        Public Property BirthDate() As System.Nullable(Of Date)
            Get
                Return Me._BirthDate
            End Get
            Set(ByVal value As System.Nullable(Of Date))
                If (Me._BirthDate.Equals(Value) = False) Then
                    Me.OnBirthDateChanging(Value)
                    Me.SendPropertyChanging()
                    Me._BirthDate = Value
                    Me.SendPropertyChanged("BirthDate")
                    Me.OnBirthDateChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_HireDate", DbType:="DateTime")> _
        Public Property HireDate() As System.Nullable(Of Date)
            Get
                Return Me._HireDate
            End Get
            Set(ByVal value As System.Nullable(Of Date))
                If (Me._HireDate.Equals(Value) = False) Then
                    Me.OnHireDateChanging(Value)
                    Me.SendPropertyChanging()
                    Me._HireDate = Value
                    Me.SendPropertyChanged("HireDate")
                    Me.OnHireDateChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Address", DbType:="NVarChar(60)")> _
        Public Property Address() As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)
                If ((Me._Address = Value) _
                   = False) Then
                    Me.OnAddressChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Address = Value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_City", DbType:="NVarChar(15)")> _
        Public Property City() As String
            Get
                Return Me._City
            End Get
            Set(ByVal value As String)
                If ((Me._City = Value) _
                   = False) Then
                    Me.OnCityChanging(Value)
                    Me.SendPropertyChanging()
                    Me._City = Value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Region", DbType:="NVarChar(15)")> _
        Public Property Region() As String
            Get
                Return Me._Region
            End Get
            Set(ByVal value As String)
                If ((Me._Region = Value) _
                   = False) Then
                    Me.OnRegionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Region = Value
                    Me.SendPropertyChanged("Region")
                    Me.OnRegionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PostalCode", DbType:="NVarChar(10)")> _
        Public Property PostalCode() As String
            Get
                Return Me._PostalCode
            End Get
            Set(ByVal value As String)
                If ((Me._PostalCode = Value) _
                   = False) Then
                    Me.OnPostalCodeChanging(Value)
                    Me.SendPropertyChanging()
                    Me._PostalCode = Value
                    Me.SendPropertyChanged("PostalCode")
                    Me.OnPostalCodeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Country", DbType:="NVarChar(15)")> _
        Public Property Country() As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)
                If ((Me._Country = Value) _
                   = False) Then
                    Me.OnCountryChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Country = Value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_HomePhone", DbType:="NVarChar(24)")> _
        Public Property HomePhone() As String
            Get
                Return Me._HomePhone
            End Get
            Set(ByVal value As String)
                If ((Me._HomePhone = Value) _
                   = False) Then
                    Me.OnHomePhoneChanging(Value)
                    Me.SendPropertyChanging()
                    Me._HomePhone = Value
                    Me.SendPropertyChanged("HomePhone")
                    Me.OnHomePhoneChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Extension", DbType:="NVarChar(4)")> _
        Public Property Extension() As String
            Get
                Return Me._Extension
            End Get
            Set(ByVal value As String)
                If ((Me._Extension = Value) _
                   = False) Then
                    Me.OnExtensionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Extension = Value
                    Me.SendPropertyChanged("Extension")
                    Me.OnExtensionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Photo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
        Public Property Photo() As Byte()
            Get
                Return Me._Photo
            End Get
            Set(ByVal value As Byte())
                If ((Me._Photo Is Value) _
                   = False) Then
                    Me.OnPhotoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Photo = Value
                    Me.SendPropertyChanged("Photo")
                    Me.OnPhotoChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Notes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
        Public Property Notes() As String
            Get
                Return Me._Notes
            End Get
            Set(ByVal value As String)
                If ((Me._Notes = Value) _
                   = False) Then
                    Me.OnNotesChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Notes = Value
                    Me.SendPropertyChanged("Notes")
                    Me.OnNotesChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ReportsTo", DbType:="Int")> _
        Public Property ReportsTo() As System.Nullable(Of Integer)
            Get
                Return Me._ReportsTo
            End Get
            Set(ByVal value As System.Nullable(Of Integer))
                If (Me._ReportsTo.Equals(Value) = False) Then
                    If Me._ReportsToEmployees.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnReportsToChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ReportsTo = Value
                    Me.SendPropertyChanged("ReportsTo")
                    Me.OnReportsToChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PhotoPath", DbType:="NVarChar(255)")> _
        Public Property PhotoPath() As String
            Get
                Return Me._PhotoPath
            End Get
            Set(ByVal value As String)
                If ((Me._PhotoPath = Value) _
                   = False) Then
                    Me.OnPhotoPathChanging(Value)
                    Me.SendPropertyChanging()
                    Me._PhotoPath = Value
                    Me.SendPropertyChanged("PhotoPath")
                    Me.OnPhotoPathChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Employees_Employees", Storage:="_ReportsToEmployees", ThisKey:="ReportsTo", IsForeignKey:=True)> _
        Public Property ReportsToEmployees() As Employees
            Get
                Return Me._ReportsToEmployees.Entity
            End Get
            Set(ByVal value As Employees)
                Dim previousValue As Employees = Me._ReportsToEmployees.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._ReportsToEmployees.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._ReportsToEmployees.Entity = Nothing
                        previousValue.Employee.Remove(Me)
                    End If
                    Me._ReportsToEmployees.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.Employee.Add(Me)
                        Me._ReportsTo = Value.EmployeeID
                    Else
                        Me._ReportsTo = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("ReportsToEmployees")
                End If
            End Set
        End Property

        <Association(Name:="FK_Employees_Employees", Storage:="_Employee", OtherKey:="ReportsTo", DeleteRule:="NO ACTION")> _
        Public Property Employee() As EntitySet(Of Employees)
            Get
                Return Me._Employee
            End Get
            Set(ByVal value As EntitySet(Of Employees))
                Me._Employee.Assign(Value)
            End Set
        End Property

        <Association(Name:="FK_EmployeeTerritories_Employees", Storage:="_EmployeeTerritories", OtherKey:="EmployeeID", DeleteRule:="NO ACTION")> _
        Public Property EmployeeTerritories() As EntitySet(Of EmployeeTerritories)
            Get
                Return Me._EmployeeTerritories
            End Get
            Set(ByVal value As EntitySet(Of EmployeeTerritories))
                Me._EmployeeTerritories.Assign(Value)
            End Set
        End Property

        <Association(Name:="FK_Orders_Employees", Storage:="_Orders", OtherKey:="EmployeeID", DeleteRule:="NO ACTION")> _
        Public Property Orders() As EntitySet(Of Orders)
            Get
                Return Me._Orders
            End Get
            Set(ByVal value As EntitySet(Of Orders))
                Me._Orders.Assign(Value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Employee(ByVal entity As Employees)
            Me.SendPropertyChanging()
            entity.ReportsToEmployees = Me
            Me.SendPropertyChanged("Employee")
        End Sub

        Private Sub detach_Employee(ByVal entity As Employees)
            Me.SendPropertyChanging()
            entity.ReportsToEmployees = Nothing
            Me.SendPropertyChanged("Employee")
        End Sub

        Private Sub attach_EmployeeTerritories(ByVal entity As EmployeeTerritories)
            Me.SendPropertyChanging()
            entity.Employees = Me
            Me.SendPropertyChanged("EmployeeTerritories")
        End Sub

        Private Sub detach_EmployeeTerritories(ByVal entity As EmployeeTerritories)
            Me.SendPropertyChanging()
            entity.Employees = Nothing
            Me.SendPropertyChanged("EmployeeTerritories")
        End Sub

        Private Sub attach_Orders(ByVal entity As Orders)
            Me.SendPropertyChanging()
            entity.Employees = Me
            Me.SendPropertyChanged("Orders")
        End Sub

        Private Sub detach_Orders(ByVal entity As Orders)
            Me.SendPropertyChanging()
            entity.Employees = Nothing
            Me.SendPropertyChanged("Orders")
        End Sub
    End Class

    <Table(Name:="dbo.EmployeeSplit")> _
    Partial Public Class EmployeeSplit
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As Integer

        Private _Extension As String

        Private _PhotoPath As String

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnExtensionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnExtensionChanged()
        End Sub
        Partial Private Sub OnPhotoPathChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhotoPathChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
        End Sub

        <Column(Storage:="_ID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property ID() As Integer
            Get
                Return Me._ID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ID = Value) _
                   = False) Then
                    Me.OnIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ID = Value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Extension", DbType:="NVarChar(4)")> _
        Public Property Extension() As String
            Get
                Return Me._Extension
            End Get
            Set(ByVal value As String)
                If ((Me._Extension = Value) _
                   = False) Then
                    Me.OnExtensionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Extension = Value
                    Me.SendPropertyChanged("Extension")
                    Me.OnExtensionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PhotoPath", DbType:="NVarChar(255)")> _
        Public Property PhotoPath() As String
            Get
                Return Me._PhotoPath
            End Get
            Set(ByVal value As String)
                If ((Me._PhotoPath = Value) _
                   = False) Then
                    Me.OnPhotoPathChanging(Value)
                    Me.SendPropertyChanging()
                    Me._PhotoPath = Value
                    Me.SendPropertyChanged("PhotoPath")
                    Me.OnPhotoPathChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.EmployeeTerritories")> _
    Partial Public Class EmployeeTerritories
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _EmployeeID As Integer

        Private _TerritoryID As String

        Private _Employees As EntityRef(Of Employees)

        Private _Territories As EntityRef(Of Territories)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnEmployeeIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnEmployeeIDChanged()
        End Sub
        Partial Private Sub OnTerritoryIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTerritoryIDChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._Employees = CType(Nothing, EntityRef(Of Employees))
            Me._Territories = CType(Nothing, EntityRef(Of Territories))
        End Sub

        <Column(Storage:="_EmployeeID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property EmployeeID() As Integer
            Get
                Return Me._EmployeeID
            End Get
            Set(ByVal value As Integer)
                If ((Me._EmployeeID = Value) _
                   = False) Then
                    If Me._Employees.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnEmployeeIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._EmployeeID = Value
                    Me.SendPropertyChanged("EmployeeID")
                    Me.OnEmployeeIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_TerritoryID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
        Public Property TerritoryID() As String
            Get
                Return Me._TerritoryID
            End Get
            Set(ByVal value As String)
                If ((Me._TerritoryID = Value) _
                   = False) Then
                    If Me._Territories.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnTerritoryIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._TerritoryID = Value
                    Me.SendPropertyChanged("TerritoryID")
                    Me.OnTerritoryIDChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_EmployeeTerritories_Employees", Storage:="_Employees", ThisKey:="EmployeeID", IsForeignKey:=True)> _
        Public Property Employees() As Employees
            Get
                Return Me._Employees.Entity
            End Get
            Set(ByVal value As Employees)
                Dim previousValue As Employees = Me._Employees.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Employees.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Employees.Entity = Nothing
                        previousValue.EmployeeTerritories.Remove(Me)
                    End If
                    Me._Employees.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.EmployeeTerritories.Add(Me)
                        Me._EmployeeID = Value.EmployeeID
                    Else
                        Me._EmployeeID = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Employees")
                End If
            End Set
        End Property

        <Association(Name:="FK_EmployeeTerritories_Territories", Storage:="_Territories", ThisKey:="TerritoryID", IsForeignKey:=True)> _
        Public Property Territories() As Territories
            Get
                Return Me._Territories.Entity
            End Get
            Set(ByVal value As Territories)
                Dim previousValue As Territories = Me._Territories.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Territories.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Territories.Entity = Nothing
                        previousValue.EmployeeTerritories.Remove(Me)
                    End If
                    Me._Territories.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.EmployeeTerritories.Add(Me)
                        Me._TerritoryID = Value.TerritoryID
                    Else
                        Me._TerritoryID = CType(Nothing, String)
                    End If
                    Me.SendPropertyChanged("Territories")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.Order Details")> _
    Partial Public Class OrderDetails
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _OrderID As Integer

        Private _ProductID As Integer

        Private _UnitPrice As Decimal

        Private _Quantity As Short

        Private _Discount As Single

        Private _Orders As EntityRef(Of Orders)

        Private _Products As EntityRef(Of Products)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnOrderIDChanged()
        End Sub
        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnUnitPriceChanging(ByVal value As Decimal)
        End Sub
        Partial Private Sub OnUnitPriceChanged()
        End Sub
        Partial Private Sub OnQuantityChanging(ByVal value As Short)
        End Sub
        Partial Private Sub OnQuantityChanged()
        End Sub
        Partial Private Sub OnDiscountChanging(ByVal value As Single)
        End Sub
        Partial Private Sub OnDiscountChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._Orders = CType(Nothing, EntityRef(Of Orders))
            Me._Products = CType(Nothing, EntityRef(Of Products))
        End Sub

        <Column(Storage:="_OrderID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property OrderID() As Integer
            Get
                Return Me._OrderID
            End Get
            Set(ByVal value As Integer)
                If ((Me._OrderID = Value) _
                   = False) Then
                    If Me._Orders.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnOrderIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._OrderID = Value
                    Me.SendPropertyChanged("OrderID")
                    Me.OnOrderIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ProductID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property ProductID() As Integer
            Get
                Return Me._ProductID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ProductID = Value) _
                   = False) Then
                    If Me._Products.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnProductIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ProductID = Value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_UnitPrice", DbType:="Money NOT NULL")> _
        Public Property UnitPrice() As Decimal
            Get
                Return Me._UnitPrice
            End Get
            Set(ByVal value As Decimal)
                If ((Me._UnitPrice = Value) _
                   = False) Then
                    Me.OnUnitPriceChanging(Value)
                    Me.SendPropertyChanging()
                    Me._UnitPrice = Value
                    Me.SendPropertyChanged("UnitPrice")
                    Me.OnUnitPriceChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Quantity", DbType:="SmallInt NOT NULL")> _
        Public Property Quantity() As Short
            Get
                Return Me._Quantity
            End Get
            Set(ByVal value As Short)
                If ((Me._Quantity = Value) _
                   = False) Then
                    Me.OnQuantityChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Quantity = Value
                    Me.SendPropertyChanged("Quantity")
                    Me.OnQuantityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Discount", DbType:="Real NOT NULL")> _
        Public Property Discount() As Single
            Get
                Return Me._Discount
            End Get
            Set(ByVal value As Single)
                If ((Me._Discount = Value) _
                   = False) Then
                    Me.OnDiscountChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Discount = Value
                    Me.SendPropertyChanged("Discount")
                    Me.OnDiscountChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Order_Details_Orders", Storage:="_Orders", ThisKey:="OrderID", IsForeignKey:=True)> _
        Public Property Orders() As Orders
            Get
                Return Me._Orders.Entity
            End Get
            Set(ByVal value As Orders)
                Dim previousValue As Orders = Me._Orders.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Orders.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Orders.Entity = Nothing
                        previousValue.OrderDetails.Remove(Me)
                    End If
                    Me._Orders.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.OrderDetails.Add(Me)
                        Me._OrderID = Value.OrderID
                    Else
                        Me._OrderID = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Orders")
                End If
            End Set
        End Property

        <Association(Name:="FK_Order_Details_Products", Storage:="_Products", ThisKey:="ProductID", IsForeignKey:=True)> _
        Public Property Products() As Products
            Get
                Return Me._Products.Entity
            End Get
            Set(ByVal value As Products)
                Dim previousValue As Products = Me._Products.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Products.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Products.Entity = Nothing
                        previousValue.OrderDetails.Remove(Me)
                    End If
                    Me._Products.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.OrderDetails.Add(Me)
                        Me._ProductID = Value.ProductID
                    Else
                        Me._ProductID = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Products")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Table(Name:="dbo.Orders")> _
    Partial Public Class Orders
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _OrderID As Integer

        Private _CustomerID As String

        Private _EmployeeID As System.Nullable(Of Integer)

        Private _OrderDate As System.Nullable(Of Date)

        Private _RequiredDate As System.Nullable(Of Date)

        Private _ShippedDate As System.Nullable(Of Date)

        Private _ShipVia As System.Nullable(Of Integer)

        Private _Freight As System.Nullable(Of Decimal)

        Private _ShipName As String

        Private _ShipAddress As String

        Private _ShipCity As String

        Private _ShipRegion As String

        Private _ShipPostalCode As String

        Private _ShipCountry As String

        Private _OrderDetails As EntitySet(Of OrderDetails)

        Private _Customers As EntityRef(Of Customers)

        Private _Employees As EntityRef(Of Employees)

        Private _Shippers As EntityRef(Of Shippers)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnOrderIDChanged()
        End Sub
        Partial Private Sub OnCustomerIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCustomerIDChanged()
        End Sub
        Partial Private Sub OnEmployeeIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnEmployeeIDChanged()
        End Sub
        Partial Private Sub OnOrderDateChanging(ByVal value As System.Nullable(Of Date))
        End Sub
        Partial Private Sub OnOrderDateChanged()
        End Sub
        Partial Private Sub OnRequiredDateChanging(ByVal value As System.Nullable(Of Date))
        End Sub
        Partial Private Sub OnRequiredDateChanged()
        End Sub
        Partial Private Sub OnShippedDateChanging(ByVal value As System.Nullable(Of Date))
        End Sub
        Partial Private Sub OnShippedDateChanged()
        End Sub
        Partial Private Sub OnShipViaChanging(ByVal value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnShipViaChanged()
        End Sub
        Partial Private Sub OnFreightChanging(ByVal value As System.Nullable(Of Decimal))
        End Sub
        Partial Private Sub OnFreightChanged()
        End Sub
        Partial Private Sub OnShipNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipNameChanged()
        End Sub
        Partial Private Sub OnShipAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipAddressChanged()
        End Sub
        Partial Private Sub OnShipCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipCityChanged()
        End Sub
        Partial Private Sub OnShipRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipRegionChanged()
        End Sub
        Partial Private Sub OnShipPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipPostalCodeChanged()
        End Sub
        Partial Private Sub OnShipCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipCountryChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._OrderDetails = New EntitySet(Of OrderDetails)(AddressOf Me.attach_OrderDetails, AddressOf Me.detach_OrderDetails)
            Me._Customers = CType(Nothing, EntityRef(Of Customers))
            Me._Employees = CType(Nothing, EntityRef(Of Employees))
            Me._Shippers = CType(Nothing, EntityRef(Of Shippers))
        End Sub

        <Column(Storage:="_OrderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property OrderID() As Integer
            Get
                Return Me._OrderID
            End Get
            Set(ByVal value As Integer)
                If ((Me._OrderID = Value) _
                   = False) Then
                    Me.OnOrderIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._OrderID = Value
                    Me.SendPropertyChanged("OrderID")
                    Me.OnOrderIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CustomerID", DbType:="NChar(5)")> _
        Public Property CustomerID() As String
            Get
                Return Me._CustomerID
            End Get
            Set(ByVal value As String)
                If ((Me._CustomerID = Value) _
                   = False) Then
                    If Me._Customers.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnCustomerIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CustomerID = Value
                    Me.SendPropertyChanged("CustomerID")
                    Me.OnCustomerIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_EmployeeID", DbType:="Int")> _
        Public Property EmployeeID() As System.Nullable(Of Integer)
            Get
                Return Me._EmployeeID
            End Get
            Set(ByVal value As System.Nullable(Of Integer))
                If (Me._EmployeeID.Equals(Value) = False) Then
                    If Me._Employees.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnEmployeeIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._EmployeeID = Value
                    Me.SendPropertyChanged("EmployeeID")
                    Me.OnEmployeeIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_OrderDate", DbType:="DateTime")> _
        Public Property OrderDate() As System.Nullable(Of Date)
            Get
                Return Me._OrderDate
            End Get
            Set(ByVal value As System.Nullable(Of Date))
                If (Me._OrderDate.Equals(Value) = False) Then
                    Me.OnOrderDateChanging(Value)
                    Me.SendPropertyChanging()
                    Me._OrderDate = Value
                    Me.SendPropertyChanged("OrderDate")
                    Me.OnOrderDateChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_RequiredDate", DbType:="DateTime")> _
        Public Property RequiredDate() As System.Nullable(Of Date)
            Get
                Return Me._RequiredDate
            End Get
            Set(ByVal value As System.Nullable(Of Date))
                If (Me._RequiredDate.Equals(Value) = False) Then
                    Me.OnRequiredDateChanging(Value)
                    Me.SendPropertyChanging()
                    Me._RequiredDate = Value
                    Me.SendPropertyChanged("RequiredDate")
                    Me.OnRequiredDateChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ShippedDate", DbType:="DateTime")> _
        Public Property ShippedDate() As System.Nullable(Of Date)
            Get
                Return Me._ShippedDate
            End Get
            Set(ByVal value As System.Nullable(Of Date))
                If (Me._ShippedDate.Equals(Value) = False) Then
                    Me.OnShippedDateChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ShippedDate = Value
                    Me.SendPropertyChanged("ShippedDate")
                    Me.OnShippedDateChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ShipVia", DbType:="Int")> _
        Public Property ShipVia() As System.Nullable(Of Integer)
            Get
                Return Me._ShipVia
            End Get
            Set(ByVal value As System.Nullable(Of Integer))
                If (Me._ShipVia.Equals(Value) = False) Then
                    If Me._Shippers.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnShipViaChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ShipVia = Value
                    Me.SendPropertyChanged("ShipVia")
                    Me.OnShipViaChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Freight", DbType:="Money")> _
        Public Property Freight() As System.Nullable(Of Decimal)
            Get
                Return Me._Freight
            End Get
            Set(ByVal value As System.Nullable(Of Decimal))
                If (Me._Freight.Equals(Value) = False) Then
                    Me.OnFreightChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Freight = Value
                    Me.SendPropertyChanged("Freight")
                    Me.OnFreightChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ShipName", DbType:="NVarChar(40)")> _
        Public Property ShipName() As String
            Get
                Return Me._ShipName
            End Get
            Set(ByVal value As String)
                If ((Me._ShipName = Value) _
                   = False) Then
                    Me.OnShipNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ShipName = Value
                    Me.SendPropertyChanged("ShipName")
                    Me.OnShipNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ShipAddress", DbType:="NVarChar(60)")> _
        Public Property ShipAddress() As String
            Get
                Return Me._ShipAddress
            End Get
            Set(ByVal value As String)
                If ((Me._ShipAddress = Value) _
                   = False) Then
                    Me.OnShipAddressChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ShipAddress = Value
                    Me.SendPropertyChanged("ShipAddress")
                    Me.OnShipAddressChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ShipCity", DbType:="NVarChar(15)")> _
        Public Property ShipCity() As String
            Get
                Return Me._ShipCity
            End Get
            Set(ByVal value As String)
                If ((Me._ShipCity = Value) _
                   = False) Then
                    Me.OnShipCityChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ShipCity = Value
                    Me.SendPropertyChanged("ShipCity")
                    Me.OnShipCityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ShipRegion", DbType:="NVarChar(15)")> _
        Public Property ShipRegion() As String
            Get
                Return Me._ShipRegion
            End Get
            Set(ByVal value As String)
                If ((Me._ShipRegion = Value) _
                   = False) Then
                    Me.OnShipRegionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ShipRegion = Value
                    Me.SendPropertyChanged("ShipRegion")
                    Me.OnShipRegionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ShipPostalCode", DbType:="NVarChar(10)")> _
        Public Property ShipPostalCode() As String
            Get
                Return Me._ShipPostalCode
            End Get
            Set(ByVal value As String)
                If ((Me._ShipPostalCode = Value) _
                   = False) Then
                    Me.OnShipPostalCodeChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ShipPostalCode = Value
                    Me.SendPropertyChanged("ShipPostalCode")
                    Me.OnShipPostalCodeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ShipCountry", DbType:="NVarChar(15)")> _
        Public Property ShipCountry() As String
            Get
                Return Me._ShipCountry
            End Get
            Set(ByVal value As String)
                If ((Me._ShipCountry = Value) _
                   = False) Then
                    Me.OnShipCountryChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ShipCountry = Value
                    Me.SendPropertyChanged("ShipCountry")
                    Me.OnShipCountryChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Order_Details_Orders", Storage:="_OrderDetails", OtherKey:="OrderID", DeleteRule:="NO ACTION")> _
        Public Property OrderDetails() As EntitySet(Of OrderDetails)
            Get
                Return Me._OrderDetails
            End Get
            Set(ByVal value As EntitySet(Of OrderDetails))
                Me._OrderDetails.Assign(Value)
            End Set
        End Property

        <Association(Name:="FK_Orders_Customers", Storage:="_Customers", ThisKey:="CustomerID", IsForeignKey:=True)> _
        Public Property Customers() As Customers
            Get
                Return Me._Customers.Entity
            End Get
            Set(ByVal value As Customers)
                Dim previousValue As Customers = Me._Customers.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Customers.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Customers.Entity = Nothing
                        previousValue.Orders.Remove(Me)
                    End If
                    Me._Customers.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.Orders.Add(Me)
                        Me._CustomerID = Value.CustomerID
                    Else
                        Me._CustomerID = CType(Nothing, String)
                    End If
                    Me.SendPropertyChanged("Customers")
                End If
            End Set
        End Property

        <Association(Name:="FK_Orders_Employees", Storage:="_Employees", ThisKey:="EmployeeID", IsForeignKey:=True)> _
        Public Property Employees() As Employees
            Get
                Return Me._Employees.Entity
            End Get
            Set(ByVal value As Employees)
                Dim previousValue As Employees = Me._Employees.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Employees.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Employees.Entity = Nothing
                        previousValue.Orders.Remove(Me)
                    End If
                    Me._Employees.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.Orders.Add(Me)
                        Me._EmployeeID = Value.EmployeeID
                    Else
                        Me._EmployeeID = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("Employees")
                End If
            End Set
        End Property

        <Association(Name:="FK_Orders_Shippers", Storage:="_Shippers", ThisKey:="ShipVia", IsForeignKey:=True)> _
        Public Property Shippers() As Shippers
            Get
                Return Me._Shippers.Entity
            End Get
            Set(ByVal value As Shippers)
                Dim previousValue As Shippers = Me._Shippers.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Shippers.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Shippers.Entity = Nothing
                        previousValue.Orders.Remove(Me)
                    End If
                    Me._Shippers.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.Orders.Add(Me)
                        Me._ShipVia = Value.ShipperID
                    Else
                        Me._ShipVia = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("Shippers")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_OrderDetails(ByVal entity As OrderDetails)
            Me.SendPropertyChanging()
            entity.Orders = Me
            Me.SendPropertyChanged("OrderDetails")
        End Sub

        Private Sub detach_OrderDetails(ByVal entity As OrderDetails)
            Me.SendPropertyChanging()
            entity.Orders = Nothing
            Me.SendPropertyChanged("OrderDetails")
        End Sub
    End Class

    <Table(Name:="dbo.Products")> _
    Partial Public Class Products
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ProductID As Integer

        Private _ProductName As String

        Private _SupplierID As System.Nullable(Of Integer)

        Private _CategoryID As System.Nullable(Of Integer)

        Private _QuantityPerUnit As String

        Private _UnitPrice As System.Nullable(Of Decimal)

        Private _UnitsInStock As System.Nullable(Of Short)

        Private _UnitsOnOrder As System.Nullable(Of Short)

        Private _ReorderLevel As System.Nullable(Of Short)

        Private _Discontinued As Boolean

        Private _OrderDetails As EntitySet(Of OrderDetails)

        Private _Categories As EntityRef(Of Categories)

        Private _Suppliers As EntityRef(Of Suppliers)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnProductNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnProductNameChanged()
        End Sub
        Partial Private Sub OnSupplierIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnSupplierIDChanged()
        End Sub
        Partial Private Sub OnCategoryIDChanging(ByVal value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnCategoryIDChanged()
        End Sub
        Partial Private Sub OnQuantityPerUnitChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnQuantityPerUnitChanged()
        End Sub
        Partial Private Sub OnUnitPriceChanging(ByVal value As System.Nullable(Of Decimal))
        End Sub
        Partial Private Sub OnUnitPriceChanged()
        End Sub
        Partial Private Sub OnUnitsInStockChanging(ByVal value As System.Nullable(Of Short))
        End Sub
        Partial Private Sub OnUnitsInStockChanged()
        End Sub
        Partial Private Sub OnUnitsOnOrderChanging(ByVal value As System.Nullable(Of Short))
        End Sub
        Partial Private Sub OnUnitsOnOrderChanged()
        End Sub
        Partial Private Sub OnReorderLevelChanging(ByVal value As System.Nullable(Of Short))
        End Sub
        Partial Private Sub OnReorderLevelChanged()
        End Sub
        Partial Private Sub OnDiscontinuedChanging(ByVal value As Boolean)
        End Sub
        Partial Private Sub OnDiscontinuedChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._OrderDetails = New EntitySet(Of OrderDetails)(AddressOf Me.attach_OrderDetails, AddressOf Me.detach_OrderDetails)
            Me._Categories = CType(Nothing, EntityRef(Of Categories))
            Me._Suppliers = CType(Nothing, EntityRef(Of Suppliers))
        End Sub

        <Column(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property ProductID() As Integer
            Get
                Return Me._ProductID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ProductID = Value) _
                   = False) Then
                    Me.OnProductIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ProductID = Value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property ProductName() As String
            Get
                Return Me._ProductName
            End Get
            Set(ByVal value As String)
                If ((Me._ProductName = Value) _
                   = False) Then
                    Me.OnProductNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ProductName = Value
                    Me.SendPropertyChanged("ProductName")
                    Me.OnProductNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_SupplierID", DbType:="Int")> _
        Public Property SupplierID() As System.Nullable(Of Integer)
            Get
                Return Me._SupplierID
            End Get
            Set(ByVal value As System.Nullable(Of Integer))
                If (Me._SupplierID.Equals(Value) = False) Then
                    If Me._Suppliers.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnSupplierIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._SupplierID = Value
                    Me.SendPropertyChanged("SupplierID")
                    Me.OnSupplierIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CategoryID", DbType:="Int")> _
        Public Property CategoryID() As System.Nullable(Of Integer)
            Get
                Return Me._CategoryID
            End Get
            Set(ByVal value As System.Nullable(Of Integer))
                If (Me._CategoryID.Equals(Value) = False) Then
                    If Me._Categories.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnCategoryIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CategoryID = Value
                    Me.SendPropertyChanged("CategoryID")
                    Me.OnCategoryIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_QuantityPerUnit", DbType:="NVarChar(20)")> _
        Public Property QuantityPerUnit() As String
            Get
                Return Me._QuantityPerUnit
            End Get
            Set(ByVal value As String)
                If ((Me._QuantityPerUnit = Value) _
                   = False) Then
                    Me.OnQuantityPerUnitChanging(Value)
                    Me.SendPropertyChanging()
                    Me._QuantityPerUnit = Value
                    Me.SendPropertyChanged("QuantityPerUnit")
                    Me.OnQuantityPerUnitChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_UnitPrice", DbType:="Money")> _
        Public Property UnitPrice() As System.Nullable(Of Decimal)
            Get
                Return Me._UnitPrice
            End Get
            Set(ByVal value As System.Nullable(Of Decimal))
                If (Me._UnitPrice.Equals(Value) = False) Then
                    Me.OnUnitPriceChanging(Value)
                    Me.SendPropertyChanging()
                    Me._UnitPrice = Value
                    Me.SendPropertyChanged("UnitPrice")
                    Me.OnUnitPriceChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_UnitsInStock", DbType:="SmallInt")> _
        Public Property UnitsInStock() As System.Nullable(Of Short)
            Get
                Return Me._UnitsInStock
            End Get
            Set(ByVal value As System.Nullable(Of Short))
                If (Me._UnitsInStock.Equals(Value) = False) Then
                    Me.OnUnitsInStockChanging(Value)
                    Me.SendPropertyChanging()
                    Me._UnitsInStock = Value
                    Me.SendPropertyChanged("UnitsInStock")
                    Me.OnUnitsInStockChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_UnitsOnOrder", DbType:="SmallInt")> _
        Public Property UnitsOnOrder() As System.Nullable(Of Short)
            Get
                Return Me._UnitsOnOrder
            End Get
            Set(ByVal value As System.Nullable(Of Short))
                If (Me._UnitsOnOrder.Equals(Value) = False) Then
                    Me.OnUnitsOnOrderChanging(Value)
                    Me.SendPropertyChanging()
                    Me._UnitsOnOrder = Value
                    Me.SendPropertyChanged("UnitsOnOrder")
                    Me.OnUnitsOnOrderChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ReorderLevel", DbType:="SmallInt")> _
        Public Property ReorderLevel() As System.Nullable(Of Short)
            Get
                Return Me._ReorderLevel
            End Get
            Set(ByVal value As System.Nullable(Of Short))
                If (Me._ReorderLevel.Equals(Value) = False) Then
                    Me.OnReorderLevelChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ReorderLevel = Value
                    Me.SendPropertyChanged("ReorderLevel")
                    Me.OnReorderLevelChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Discontinued", DbType:="Bit NOT NULL")> _
        Public Property Discontinued() As Boolean
            Get
                Return Me._Discontinued
            End Get
            Set(ByVal value As Boolean)
                If ((Me._Discontinued = Value) _
                   = False) Then
                    Me.OnDiscontinuedChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Discontinued = Value
                    Me.SendPropertyChanged("Discontinued")
                    Me.OnDiscontinuedChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Order_Details_Products", Storage:="_OrderDetails", OtherKey:="ProductID", DeleteRule:="NO ACTION")> _
        Public Property OrderDetails() As EntitySet(Of OrderDetails)
            Get
                Return Me._OrderDetails
            End Get
            Set(ByVal value As EntitySet(Of OrderDetails))
                Me._OrderDetails.Assign(Value)
            End Set
        End Property

        <Association(Name:="FK_Products_Categories", Storage:="_Categories", ThisKey:="CategoryID", IsForeignKey:=True)> _
        Public Property Categories() As Categories
            Get
                Return Me._Categories.Entity
            End Get
            Set(ByVal value As Categories)
                Dim previousValue As Categories = Me._Categories.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Categories.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Categories.Entity = Nothing
                        previousValue.Products.Remove(Me)
                    End If
                    Me._Categories.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.Products.Add(Me)
                        Me._CategoryID = Value.CategoryID
                    Else
                        Me._CategoryID = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("Categories")
                End If
            End Set
        End Property

        <Association(Name:="FK_Products_Suppliers", Storage:="_Suppliers", ThisKey:="SupplierID", IsForeignKey:=True)> _
        Public Property Suppliers() As Suppliers
            Get
                Return Me._Suppliers.Entity
            End Get
            Set(ByVal value As Suppliers)
                Dim previousValue As Suppliers = Me._Suppliers.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Suppliers.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Suppliers.Entity = Nothing
                        previousValue.Products.Remove(Me)
                    End If
                    Me._Suppliers.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.Products.Add(Me)
                        Me._SupplierID = Value.SupplierID
                    Else
                        Me._SupplierID = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("Suppliers")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_OrderDetails(ByVal entity As OrderDetails)
            Me.SendPropertyChanging()
            entity.Products = Me
            Me.SendPropertyChanged("OrderDetails")
        End Sub

        Private Sub detach_OrderDetails(ByVal entity As OrderDetails)
            Me.SendPropertyChanging()
            entity.Products = Nothing
            Me.SendPropertyChanged("OrderDetails")
        End Sub
    End Class

    <Table(Name:="dbo.Region")> _
    Partial Public Class Region
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _RegionID As Integer

        Private _RegionDescription As String

        Private _Territories As EntitySet(Of Territories)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnRegionIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnRegionIDChanged()
        End Sub
        Partial Private Sub OnRegionDescriptionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionDescriptionChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._Territories = New EntitySet(Of Territories)(AddressOf Me.attach_Territories, AddressOf Me.detach_Territories)
        End Sub

        <Column(Storage:="_RegionID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
        Public Property RegionID() As Integer
            Get
                Return Me._RegionID
            End Get
            Set(ByVal value As Integer)
                If ((Me._RegionID = Value) _
                   = False) Then
                    Me.OnRegionIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._RegionID = Value
                    Me.SendPropertyChanged("RegionID")
                    Me.OnRegionIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_RegionDescription", DbType:="NChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property RegionDescription() As String
            Get
                Return Me._RegionDescription
            End Get
            Set(ByVal value As String)
                If ((Me._RegionDescription = Value) _
                   = False) Then
                    Me.OnRegionDescriptionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._RegionDescription = Value
                    Me.SendPropertyChanged("RegionDescription")
                    Me.OnRegionDescriptionChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Territories_Region", Storage:="_Territories", OtherKey:="RegionID", DeleteRule:="NO ACTION")> _
        Public Property Territories() As EntitySet(Of Territories)
            Get
                Return Me._Territories
            End Get
            Set(ByVal value As EntitySet(Of Territories))
                Me._Territories.Assign(Value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Territories(ByVal entity As Territories)
            Me.SendPropertyChanging()
            entity.Region = Me
            Me.SendPropertyChanged("Territories")
        End Sub

        Private Sub detach_Territories(ByVal entity As Territories)
            Me.SendPropertyChanging()
            entity.Region = Nothing
            Me.SendPropertyChanged("Territories")
        End Sub
    End Class

    <Table(Name:="dbo.Shippers")> _
    Partial Public Class Shippers
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ShipperID As Integer

        Private _CompanyName As String

        Private _Phone As String

        Private _Orders As EntitySet(Of Orders)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnShipperIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnShipperIDChanged()
        End Sub
        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCompanyNameChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._Orders = New EntitySet(Of Orders)(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
        End Sub

        <Column(Storage:="_ShipperID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property ShipperID() As Integer
            Get
                Return Me._ShipperID
            End Get
            Set(ByVal value As Integer)
                If ((Me._ShipperID = Value) _
                   = False) Then
                    Me.OnShipperIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ShipperID = Value
                    Me.SendPropertyChanged("ShipperID")
                    Me.OnShipperIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property CompanyName() As String
            Get
                Return Me._CompanyName
            End Get
            Set(ByVal value As String)
                If ((Me._CompanyName = Value) _
                   = False) Then
                    Me.OnCompanyNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CompanyName = Value
                    Me.SendPropertyChanged("CompanyName")
                    Me.OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
        Public Property Phone() As String
            Get
                Return Me._Phone
            End Get
            Set(ByVal value As String)
                If ((Me._Phone = Value) _
                   = False) Then
                    Me.OnPhoneChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Phone = Value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Orders_Shippers", Storage:="_Orders", OtherKey:="ShipVia", DeleteRule:="NO ACTION")> _
        Public Property Orders() As EntitySet(Of Orders)
            Get
                Return Me._Orders
            End Get
            Set(ByVal value As EntitySet(Of Orders))
                Me._Orders.Assign(Value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Orders(ByVal entity As Orders)
            Me.SendPropertyChanging()
            entity.Shippers = Me
            Me.SendPropertyChanged("Orders")
        End Sub

        Private Sub detach_Orders(ByVal entity As Orders)
            Me.SendPropertyChanging()
            entity.Shippers = Nothing
            Me.SendPropertyChanged("Orders")
        End Sub
    End Class

    <Table(Name:="dbo.Suppliers")> _
    Partial Public Class Suppliers
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _SupplierID As Integer

        Private _CompanyName As String

        Private _ContactName As String

        Private _ContactTitle As String

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _Phone As String

        Private _Fax As String

        Private _HomePage As String

        Private _Products As EntitySet(Of Products)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnSupplierIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnSupplierIDChanged()
        End Sub
        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCompanyNameChanged()
        End Sub
        Partial Private Sub OnContactNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactNameChanged()
        End Sub
        Partial Private Sub OnContactTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactTitleChanged()
        End Sub
        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
        Partial Private Sub OnFaxChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFaxChanged()
        End Sub
        Partial Private Sub OnHomePageChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnHomePageChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._Products = New EntitySet(Of Products)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
        End Sub

        <Column(Storage:="_SupplierID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property SupplierID() As Integer
            Get
                Return Me._SupplierID
            End Get
            Set(ByVal value As Integer)
                If ((Me._SupplierID = Value) _
                   = False) Then
                    Me.OnSupplierIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._SupplierID = Value
                    Me.SendPropertyChanged("SupplierID")
                    Me.OnSupplierIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
        Public Property CompanyName() As String
            Get
                Return Me._CompanyName
            End Get
            Set(ByVal value As String)
                If ((Me._CompanyName = Value) _
                   = False) Then
                    Me.OnCompanyNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CompanyName = Value
                    Me.SendPropertyChanged("CompanyName")
                    Me.OnCompanyNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactName", DbType:="NVarChar(30)")> _
        Public Property ContactName() As String
            Get
                Return Me._ContactName
            End Get
            Set(ByVal value As String)
                If ((Me._ContactName = Value) _
                   = False) Then
                    Me.OnContactNameChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactName = Value
                    Me.SendPropertyChanged("ContactName")
                    Me.OnContactNameChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
        Public Property ContactTitle() As String
            Get
                Return Me._ContactTitle
            End Get
            Set(ByVal value As String)
                If ((Me._ContactTitle = Value) _
                   = False) Then
                    Me.OnContactTitleChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ContactTitle = Value
                    Me.SendPropertyChanged("ContactTitle")
                    Me.OnContactTitleChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Address", DbType:="NVarChar(60)")> _
        Public Property Address() As String
            Get
                Return Me._Address
            End Get
            Set(ByVal value As String)
                If ((Me._Address = Value) _
                   = False) Then
                    Me.OnAddressChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Address = Value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_City", DbType:="NVarChar(15)")> _
        Public Property City() As String
            Get
                Return Me._City
            End Get
            Set(ByVal value As String)
                If ((Me._City = Value) _
                   = False) Then
                    Me.OnCityChanging(Value)
                    Me.SendPropertyChanging()
                    Me._City = Value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Region", DbType:="NVarChar(15)")> _
        Public Property Region() As String
            Get
                Return Me._Region
            End Get
            Set(ByVal value As String)
                If ((Me._Region = Value) _
                   = False) Then
                    Me.OnRegionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Region = Value
                    Me.SendPropertyChanged("Region")
                    Me.OnRegionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_PostalCode", DbType:="NVarChar(10)")> _
        Public Property PostalCode() As String
            Get
                Return Me._PostalCode
            End Get
            Set(ByVal value As String)
                If ((Me._PostalCode = Value) _
                   = False) Then
                    Me.OnPostalCodeChanging(Value)
                    Me.SendPropertyChanging()
                    Me._PostalCode = Value
                    Me.SendPropertyChanged("PostalCode")
                    Me.OnPostalCodeChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Country", DbType:="NVarChar(15)")> _
        Public Property Country() As String
            Get
                Return Me._Country
            End Get
            Set(ByVal value As String)
                If ((Me._Country = Value) _
                   = False) Then
                    Me.OnCountryChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Country = Value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
        Public Property Phone() As String
            Get
                Return Me._Phone
            End Get
            Set(ByVal value As String)
                If ((Me._Phone = Value) _
                   = False) Then
                    Me.OnPhoneChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Phone = Value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
        Public Property Fax() As String
            Get
                Return Me._Fax
            End Get
            Set(ByVal value As String)
                If ((Me._Fax = Value) _
                   = False) Then
                    Me.OnFaxChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Fax = Value
                    Me.SendPropertyChanged("Fax")
                    Me.OnFaxChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_HomePage", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
        Public Property HomePage() As String
            Get
                Return Me._HomePage
            End Get
            Set(ByVal value As String)
                If ((Me._HomePage = Value) _
                   = False) Then
                    Me.OnHomePageChanging(Value)
                    Me.SendPropertyChanging()
                    Me._HomePage = Value
                    Me.SendPropertyChanged("HomePage")
                    Me.OnHomePageChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_Products_Suppliers", Storage:="_Products", OtherKey:="SupplierID", DeleteRule:="NO ACTION")> _
        Public Property Products() As EntitySet(Of Products)
            Get
                Return Me._Products
            End Get
            Set(ByVal value As EntitySet(Of Products))
                Me._Products.Assign(Value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Products(ByVal entity As Products)
            Me.SendPropertyChanging()
            entity.Suppliers = Me
            Me.SendPropertyChanged("Products")
        End Sub

        Private Sub detach_Products(ByVal entity As Products)
            Me.SendPropertyChanging()
            entity.Suppliers = Nothing
            Me.SendPropertyChanged("Products")
        End Sub
    End Class

    <Table(Name:="dbo.Territories")> _
    Partial Public Class Territories
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _TerritoryID As String

        Private _TerritoryDescription As String

        Private _RegionID As Integer

        Private _EmployeeTerritories As EntitySet(Of EmployeeTerritories)

        Private _Region As EntityRef(Of Region)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate()
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnTerritoryIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTerritoryIDChanged()
        End Sub
        Partial Private Sub OnTerritoryDescriptionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTerritoryDescriptionChanged()
        End Sub
        Partial Private Sub OnRegionIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnRegionIDChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            OnCreated()
            Me._EmployeeTerritories = New EntitySet(Of EmployeeTerritories)(AddressOf Me.attach_EmployeeTerritories, AddressOf Me.detach_EmployeeTerritories)
            Me._Region = CType(Nothing, EntityRef(Of Region))
        End Sub

        <Column(Storage:="_TerritoryID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
        Public Property TerritoryID() As String
            Get
                Return Me._TerritoryID
            End Get
            Set(ByVal value As String)
                If ((Me._TerritoryID = Value) _
                   = False) Then
                    Me.OnTerritoryIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._TerritoryID = Value
                    Me.SendPropertyChanged("TerritoryID")
                    Me.OnTerritoryIDChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_TerritoryDescription", DbType:="NChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property TerritoryDescription() As String
            Get
                Return Me._TerritoryDescription
            End Get
            Set(ByVal value As String)
                If ((Me._TerritoryDescription = Value) _
                   = False) Then
                    Me.OnTerritoryDescriptionChanging(Value)
                    Me.SendPropertyChanging()
                    Me._TerritoryDescription = Value
                    Me.SendPropertyChanged("TerritoryDescription")
                    Me.OnTerritoryDescriptionChanged()
                End If
            End Set
        End Property

        <Column(Storage:="_RegionID", DbType:="Int NOT NULL")> _
        Public Property RegionID() As Integer
            Get
                Return Me._RegionID
            End Get
            Set(ByVal value As Integer)
                If ((Me._RegionID = Value) _
                   = False) Then
                    If Me._Region.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
                    End If
                    Me.OnRegionIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._RegionID = Value
                    Me.SendPropertyChanged("RegionID")
                    Me.OnRegionIDChanged()
                End If
            End Set
        End Property

        <Association(Name:="FK_EmployeeTerritories_Territories", Storage:="_EmployeeTerritories", OtherKey:="TerritoryID", DeleteRule:="NO ACTION")> _
        Public Property EmployeeTerritories() As EntitySet(Of EmployeeTerritories)
            Get
                Return Me._EmployeeTerritories
            End Get
            Set(ByVal value As EntitySet(Of EmployeeTerritories))
                Me._EmployeeTerritories.Assign(Value)
            End Set
        End Property

        <Association(Name:="FK_Territories_Region", Storage:="_Region", ThisKey:="RegionID", IsForeignKey:=True)> _
        Public Property Region() As Region
            Get
                Return Me._Region.Entity
            End Get
            Set(ByVal value As Region)
                Dim previousValue As Region = Me._Region.Entity
                If (((previousValue Is Value) _
                   = False) _
                   OrElse (Me._Region.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                       = False) Then
                        Me._Region.Entity = Nothing
                        previousValue.Territories.Remove(Me)
                    End If
                    Me._Region.Entity = Value
                    If ((Value Is Nothing) _
                       = False) Then
                        Value.Territories.Add(Me)
                        Me._RegionID = Value.RegionID
                    Else
                        Me._RegionID = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Region")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
               = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_EmployeeTerritories(ByVal entity As EmployeeTerritories)
            Me.SendPropertyChanging()
            entity.Territories = Me
            Me.SendPropertyChanged("EmployeeTerritories")
        End Sub

        Private Sub detach_EmployeeTerritories(ByVal entity As EmployeeTerritories)
            Me.SendPropertyChanging()
            entity.Territories = Nothing
            Me.SendPropertyChanged("EmployeeTerritories")
        End Sub
    End Class
End Namespace
