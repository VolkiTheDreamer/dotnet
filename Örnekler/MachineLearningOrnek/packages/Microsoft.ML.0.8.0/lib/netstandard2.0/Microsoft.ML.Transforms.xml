<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ML.Transforms</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ML.Transforms.BootstrapSamplingTransformer">
            <summary>
            This class approximates bootstrap sampling of a dataview.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.BootstrapSamplingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.Boolean,System.Nullable{System.UInt32},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.BootstrapSamplingTransformer"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="complement">Whether this is the out-of-bag sample, that is, all those rows that are not selected by the transform.</param>
            <param name="seed">The random seed. If unspecified random state will be instead derived from the environment.</param>
            <param name="shuffleInput">Whether we should attempt to shuffle the source data. By default on, but can be turned off for efficiency.</param>
            <param name="poolSize">When shuffling the output, the number of output rows to keep in that pool. Note that shuffling of output is completely distinct from shuffling of input.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.FeatureSelection.CountFeatureSelectingEstimator">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.FeatureSelection.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.CountFeatureSelectingEstimator.ColumnInfo.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Describes the parameters of the feature selection process for a column pair.
            </summary>
            <param name="input">Name of the input column.</param>
            <param name="output">Name of the column resulting from the transformation of <paramref name="input"/>. Null means <paramref name="input"/> is replaced. </param>
            <param name="minCount">If the count of non-default values for a slot is greater than or equal to this threshold in the training data, the slot is preserved.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.CountFeatureSelectingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.FeatureSelection.CountFeatureSelectingEstimator.ColumnInfo[])">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.FeatureSelection.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="env">The environment to use.</param>
            <param name="columns">Describes the parameters of the feature selection process for each column pair.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CountFeatureSelectingEstimator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.CountFeatureSelectingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int64)">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.FeatureSelection.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="env">The environment to use.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the column resulting from the transformation of <paramref name="inputColumn" />. Null means <paramref name="inputColumn" /> is replaced. </param>
            <param name="minCount">If the count of non-default values for a slot is greater than or equal to this threshold in the training data, the slot is preserved.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CountFeatureSelectingEstimator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.CountFeatureSelectingEstimator.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.FeatureSelection.CountFeatureSelectingEstimator.Arguments,Microsoft.ML.Runtime.Data.IDataView)">
            <summary>
            Create method corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.CountFeatureSelectionUtils.Train(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.String[],System.Int32[]@)">
            <summary>
            Returns the feature selection scores for each slot of each column.
            </summary>
            <param name="env">The host environment.</param>
            <param name="input">The input dataview.</param>
            <param name="columns">The columns for which to compute the feature selection scores.</param>
            <param name="colSizes">Outputs an array containing the vector sizes of the input columns</param>
            <returns>A list of scores.</returns>
        </member>
        <member name="T:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectingEstimator">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.Int32,System.Int32,System.ValueTuple{System.String,System.String}[])">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <param name="columns">Specifies the names of the input columns for the transformation, and their respective output column names.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[MutualInformationFeatureSelectingEstimator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="env">The environment to use.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the column resulting from the transformation of <paramref name="inputColumn" />. Null means <paramref name="inputColumn" /> is replaced. </param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[MutualInformationFeatureSelectingEstimator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectingEstimator.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectingEstimator.Arguments,Microsoft.ML.Runtime.Data.IDataView)">
            <summary>
            Create method corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectingEstimator.ComputeThreshold(System.Single[][],System.Int32,System.Int32@)">
            <summary>
            Computes the threshold for the scores such that the top k slots are preserved.
            If there are less than k scores greater than zero, the threshold is set to zero and
            the tiedScoresToKeep is set to zero, so that we only keep scores strictly greater than zero.
            </summary>
            <param name="scores">The score for each column and each slot.</param>
            <param name="topk">How many slots to preserve.</param>
            <param name="tiedScoresToKeep">If there are ties, how many of them to keep.</param>
            <returns>The threshold.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.TrainCore(Microsoft.ML.Runtime.IHost,Microsoft.ML.Runtime.Data.IDataView,System.String,System.String[],System.Int32,System.Int32[])">
            <summary>
            Returns the feature selection scores for each slot of each column.
            </summary>
            <param name="host">The host.</param>
            <param name="input">The input dataview.</param>
            <param name="labelColumnName">The label column.</param>
            <param name="columns">The columns for which to compute the feature selection scores.</param>
            <param name="numBins">The number of bins to use for numeric features.</param>
            <param name="colSizes">The columns' sizes before dropping any slots.</param>
            <returns>A list of scores for each column and each slot.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.Impl.ComputeMutualInformation(Microsoft.ML.Runtime.Data.Transposer,System.Int32)">
            <summary>
            Computes the mutual information for one column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.Impl.ComputeMutualInformation``1(Microsoft.ML.Runtime.Data.Transposer,System.Int32,Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.Impl.Mapper{``0})">
            <summary>
            Computes the mutual information for one column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.Impl.ComputeMutualInformation(Microsoft.ML.Runtime.Data.VBuffer{System.Int32}@,System.Int32,System.Int32)">
            <summary>
            Computes the mutual information for one slot.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.Impl.FillTable(Microsoft.ML.Runtime.Data.VBuffer{System.Int32}@,System.Int32,System.Int32)">
            <summary>
            Fills the contingency table.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.Impl.BinKeys``1(Microsoft.ML.Runtime.Data.ColumnType)">
            <summary>
            Maps from keys to ints.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.Impl.BinInts(Microsoft.ML.Runtime.Data.VBuffer{System.Int32}@,Microsoft.ML.Runtime.Data.VBuffer{System.Int32}@,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps Ints.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.Impl.BinSingles(Microsoft.ML.Runtime.Data.VBuffer{System.Single}@,Microsoft.ML.Runtime.Data.VBuffer{System.Int32}@,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps from Singles to ints. NaNs (and only NaNs) are mapped to the first bin.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.Impl.BinDoubles(Microsoft.ML.Runtime.Data.VBuffer{System.Double}@,Microsoft.ML.Runtime.Data.VBuffer{System.Int32}@,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps from Doubles to ints. NaNs (and only NaNs) are mapped to the first bin.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureSelection.MutualInformationFeatureSelectionUtils.CreateVectorMapper``2(Microsoft.ML.Runtime.Data.ValueMapper{``0,``1})">
            <summary>
            Given a mapper from T to int, creates a mapper from VBuffer{T} to VBuffer&lt;int&gt;.
            Assumes that the mapper maps default(TSrc) to default(TDst) so that the returned mapper preserves sparsity.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextAnalytics">
            <summary>
            Entry points for text anylytics transforms.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer">
            <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary><remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para>
        <para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a>
        </para>
        <para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet">
            <item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item>
            <item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item>
          </list>
        </para>
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.ColumnInfo.#ctor(System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="input">The column representing the document as a vector of floats.</param>
            <param name="output">The column containing the output scores over a set of topics, represented as a vector of floats. A null value for the column means <paramref name="input"/> is replaced. </param>
            <param name="numTopic">The number of topics.</param>
            <param name="alphaSum">Dirichlet prior on document-topic vectors.</param>
            <param name="beta">Dirichlet prior on vocab-topic vectors.</param>
            <param name="mhStep">Number of Metropolis Hasting step.</param>
            <param name="numIter">Number of iterations.</param>
            <param name="likelihoodInterval">Compute log likelihood over local dataset on this iteration interval.</param>
            <param name="numThread">The number of training threads. Default value depends on number of logical processors.</param>
            <param name="numMaxDocToken">The threshold of maximum count of tokens per doc.</param>
            <param name="numSummaryTermPerTopic">The number of words to summarize the topic.</param>
            <param name="numBurninIter">The number of burn-in iterations.</param>
            <param name="resetRandomGenerator">Reset the random number generator for each document.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.LdaSummary">
            <summary>
            Provide details about the topics discovered by <a href="https://arxiv.org/abs/1412.1576">LightLDA.</a>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.LdaState[],System.Collections.Generic.List{Microsoft.ML.Runtime.Data.VBuffer{System.ReadOnlyMemory{System.Char}}},Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.ColumnInfo[])">
            <summary>
            Initializes a new <see cref="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer"/> object.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="ldas">An array of LdaState objects, where ldas[i] is learnt from the i-th element of <paramref name="columns"/>.</param>
            <param name="columnMappings">A list of mappings, where columnMapping[i] is a map of slot names for the i-th element of <paramref name="columns"/>.</param>
            <param name="columns">Describes the parameters of the LDA process for each column pair.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator">
            <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary><remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para>
        <para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a>
        </para>
        <para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet">
            <item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item>
            <item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item>
          </list>
        </para>
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary><remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para>
        <para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a>
        </para>
        <para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet">
            <item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item>
            <item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item>
          </list>
        </para>
      </remarks>
            <param name="env">The environment.</param>
            <param name="inputColumn">The column representing the document as a vector of floats.</param>
            <param name="outputColumn">The column containing the output scores over a set of topics, represented as a vector of floats. A null value for the column means <paramref name="inputColumn" /> is replaced.</param>
            <param name="numTopic">The number of topics.</param>
            <param name="alphaSum">Dirichlet prior on document-topic vectors.</param>
            <param name="beta">Dirichlet prior on vocab-topic vectors.</param>
            <param name="mhstep">Number of Metropolis Hasting step.</param>
            <param name="numIterations">Number of iterations.</param>
            <param name="likelihoodInterval">Compute log likelihood over local dataset on this iteration interval.</param>
            <param name="numThreads">The number of training threads. Default value depends on number of logical processors.</param>
            <param name="numMaxDocToken">The threshold of maximum count of tokens per doc.</param>
            <param name="numSummaryTermPerTopic">The number of words to summarize the topic.</param>
            <param name="numBurninIterations">The number of burn-in iterations.</param>
            <param name="resetRandomGenerator">Reset the random number generator for each document.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.ColumnInfo[])">
            <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary><remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para>
        <para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a>
        </para>
        <para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet">
            <item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item>
            <item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item>
          </list>
        </para>
      </remarks>
            <param name="env">The environment.</param>
            <param name="columns">Describes the parameters of the LDA process for each column pair.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)">
            <summary>
            Returns the schema that would be produced by the transformation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.NgramHashingTransformer.Arguments,Microsoft.ML.Runtime.Data.IDataView)">
            <summary>
            Public constructor corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashingTransformer.InvertHashHelper.CallAllGetters(Microsoft.ML.Runtime.Data.IRow)">
            <summary>
            Construct an action that calls all the getters for a row, so as to easily force computation
            of lazily computed values. This will have the side effect of calling the decorator.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo.Limits">
            <summary>
            Contains the maximum number of grams to store in the dictionary, for each level of ngrams,
            from 1 (in position 0) up to ngramLength (in position ngramLength-1)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo.#ctor(System.String,System.String,System.Int32,System.Int32,System.Boolean,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria,System.Int32)">
            <summary>
            Describes how the transformer handles one Gcn column pair.
            </summary>
            <param name="input">Name of input column.</param>
            <param name="output">Name of output column.</param>
            <param name="ngramLength">Maximum ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">"Whether to store all ngram lengths up to ngramLength, or only ngramLength.</param>
            <param name="weighting">The weighting criteria.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractingEstimator">
            <summary>
            Produces a bag of counts of ngrams(sequences of consecutive values of length 1-n) in a given vector of keys.
            It does so by building a dictionary of ngrams and using the id in the dictionary as the index in the bag.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria">
            <summary>
            Weighting criteria: a statistical measure used to evaluate how important a word is to a document in a corpus.
            This enumeration is serialized.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumn"/>
            and outputs bag of word vector as <paramref name="outputColumn"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="inputColumn">The column containing text to compute bag of word vector.</param>
            <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to compute bag of word vector.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo[])">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Array of columns with information how to transform data.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.SentimentAnalyzingTransformer">
            <summary>
        Uses a pretrained sentiment model to score input strings.
      </summary><remarks>
        <para>The Sentiment transform returns the probability that the sentiment of a natural text is positive. </para>
        <para>
          The model was trained with the <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">Sentiment-specific word embedding (SSWE)</a>  and NGramFeaturizer on Twitter sentiment data,
          similarly to the sentiment analysis part of the
          <a href="https://www.microsoft.com/cognitive-services/en-us/text-analytics-api">Text Analytics cognitive service</a>. 
          The transform outputs a score between 0 and 1 as a sentiment prediction 
          (where 0 is a negative sentiment and 1 is a positive sentiment).</para> 
          <para>Currently it supports only English.</para>
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.SentimentAnalyzingTransformer.AliasIfNeeded(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.String[],System.Collections.Generic.KeyValuePair{System.String,System.String}[]@)">
            <summary>
            If any column names in <param name="colNames" /> are present in <param name="input" />, this
            method will create a transform that copies them to temporary columns. It will populate <param name="hiddenNames" />
            with an array of string pairs containing the original name and the generated temporary column name, respectively.
            </summary>
            <param name="env"></param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.StopWordsRemovingTransformer">
            <summary>
            A Stopword remover transform based on language-specific lists of stop words (most common words)
            from Office Named Entity Recognition project.
            The transform is usually applied after tokenizing text, so it compares individual tokens
            (case-insensitive comparison) to the stopwords.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.StopWordsRemovingTransformer.ColumnInfo">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.StopWordsRemovingTransformer.ColumnInfo.#ctor(System.String,System.String,Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language,System.String)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="input">Name of input column.</param>
            <param name="output">Name of output column.</param>
            <param name="language">Language-specific stop words list.</param>
            <param name="languageColumn">Optional column to use for languages. This overrides language value.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.StopWordsRemovingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.StopWordsRemovingTransformer.ColumnInfo[])">
            <summary>
            Stopword remover removes language-specific list of stop words (most common words).
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to remove stop words from.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator">
            <summary>
            Stopword remover removes language-specific list of stop words (most common words)
            This is usually applied after tokenizing text, so it compares individual tokens
            (case-insensitive comparison) to the stopwords.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language">
            <summary>
            Stopwords language. This enumeration is serialized.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)">
            <summary>
            Removes stop words from incoming token streams in <paramref name="inputColumn"/>
            and outputs the token streams without stopwords as <paramref name="outputColumn"/>.
            </summary>
            <param name="env">The environment.</param>
            <param name="inputColumn">The column containing text to remove stop words on.</param>
            <param name="outputColumn">The column containing output text. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="language">Langauge of the input text column <paramref name="inputColumn"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)">
            <summary>
            Removes stop words from incoming token streams in input columns
            and outputs the token streams without stop words as output columns.
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to remove stop words on.</param>
            <param name="language">Langauge of the input text columns <paramref name="columns"/>.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingTransform">
            <summary>
            Custom stopword remover removes specified list of stop words.
            This is usually applied after tokenizing text, so it compares individual tokens
            (case-insensitive comparison) to the stopwords.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String[],System.ValueTuple{System.String,System.String}[])">
            <summary>
            Custom stopword remover removes specified list of stop words.
            </summary>
            <param name="env">The environment.</param>
            <param name="stopwords">Array of words to remove.</param>
            <param name="columns">Pairs of columns to remove stop words from.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator">
            <summary>
            Custom stopword remover removes specified list of stop words.
            This is usually applied after tokenizing text, so it compares individual tokens
            (case-insensitive comparison) to the stopwords.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String[])">
            <summary>
            Removes stop words from incoming token streams in <paramref name="inputColumn"/>
            and outputs the token streams without stopwords as <paramref name="outputColumn"/>.
            </summary>
            <param name="env">The environment.</param>
            <param name="inputColumn">The column containing text to remove stop words on.</param>
            <param name="outputColumn">The column containing output text. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="stopwords">Array of words to remove.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.String[])">
            <summary>
            Removes stop words from incoming token streams in input columns
            and outputs the token streams without stop words as output columns.
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to remove stop words on.</param>
            <param name="stopwords">Array of words to remove.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator">
            <!-- No matching elements were found for the following include tag --><include file="doc.xml" path="doc/members/member[@name=&quot;TextFeaturizingEstimator &quot;]/*" />
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Language">
            <summary>
            Text language. This enumeration is serialized.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.TextNormKind">
            <summary>
            Text vector normalizer kind.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Arguments">
            <summary>
            This class exposes <see cref="T:Microsoft.ML.Transforms.Text.NgramExtractorTransform"/>/<see cref="T:Microsoft.ML.Transforms.Text.NgramHashExtractingTransformer"/> arguments.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.TransformApplierParams">
            <summary>
            A distilled version of the TextFeaturizingEstimator  Arguments, with all fields marked readonly and
            only the exact set of information needed to construct the transforms preserved.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizerStaticPipe">
            <summary>
            Extension methods for the static-pipeline over <see cref="T:Microsoft.ML.StaticPipe.PipelineColumn"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TextFeaturizerStaticPipe.FeaturizeText(Microsoft.ML.StaticPipe.Scalar{System.String},Microsoft.ML.StaticPipe.Scalar{System.String}[],System.Action{Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Settings})">
            <summary>
            Accept text data and converts it to array which represent combinations of ngram/skip-gram token counts.
            </summary>
            <param name="input">Input data.</param>
            <param name="otherInputs">Additional data.</param>
            <param name="advancedSettings">Delegate which allows you to set transformation settings.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextNormalizingTransformer">
            <summary>
            A text normalization transform that allows normalizing text case, removing diacritical marks, punctuation marks and/or numbers.
            The transform operates on text input as well as vector of tokens/text (vector of ReadOnlyMemory).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TextNormalizingTransformer.Mapper.IsCombiningDiacritic(System.Char)">
            <summary>
            Whether a character is a combining diacritic character or not.
            Combining diacritic characters are the set of diacritics intended to modify other characters.
            The list is provided by Office NL team.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseNormalizationMode">
            <summary>
            Case normalization mode of text. This enumeration is serialized.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TextNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseNormalizationMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Normalizes incoming text in <paramref name="inputColumn"/> by changing case, removing diacritical marks, punctuation marks and/or numbers
            and outputs new text as <paramref name="outputColumn"/>.
            </summary>
            <param name="env">The environment.</param>
            <param name="inputColumn">The column containing text to normalize.</param>
            <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="textCase">Casing text using the rules of the invariant culture.</param>
            <param name="keepDiacritics">Whether to keep diacritical marks or remove them.</param>
            <param name="keepPunctuations">Whether to keep punctuation marks or remove them.</param>
            <param name="keepNumbers">Whether to keep numbers or remove them.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TextNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseNormalizationMode,System.Boolean,System.Boolean,System.Boolean,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Normalizes incoming text in input columns by changing case, removing diacritical marks, punctuation marks and/or numbers
            and outputs new text as output columns.
            </summary>
            <param name="env">The environment.</param>
            <param name="textCase">Casing text using the rules of the invariant culture.</param>
            <param name="keepDiacritics">Whether to keep diacritical marks or remove them.</param>
            <param name="keepPunctuations">Whether to keep punctuation marks or remove them.</param>
            <param name="keepNumbers">Whether to keep numbers or remove them.</param>
            <param name="columns">Pairs of columns to run the text normalization on.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer">
            <summary>
            Character-oriented tokenizer where text is considered a sequence of characters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Boolean,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Tokenize incoming text in input columns and output the tokens as output columns.
            </summary>
            <param name="env">The environment.</param>
            <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer.Mapper.GetKeyValues(System.Int32,Microsoft.ML.Runtime.Data.VBuffer{System.ReadOnlyMemory{System.Char}}@)">
            <summary>
            Get the key values (chars) corresponding to keys in the output columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator">
            <summary>
            Character tokenizer splits text into sequences of characters using a sliding window.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Boolean)">
            <summary>
            Tokenize incoming text in <paramref name="inputColumn"/> and output the tokens as <paramref name="outputColumn"/>.
            </summary>
            <param name="env">The environment.</param>
            <param name="inputColumn">The column containing text to tokenize.</param>
            <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Boolean,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Tokenize incoming text in input columns and output the tokens as output columns.
            </summary>
            <param name="env">The environment.</param>
            <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.SignatureNgramExtractorFactory">
            <summary>
            Signature for creating an INgramExtractorFactory.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.ExtractorColumn">
            <summary>
            A many-to-one column common to both <see cref="T:Microsoft.ML.Transforms.Text.NgramExtractorTransform"/>
            and <see cref="T:Microsoft.ML.Transforms.Text.NgramHashExtractingTransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordBagBuildingTransformer.TokenizeColumn">
            <summary>
            A vanilla implementation of OneToOneColumn that is used to represent the input of any tokenize
            transform (a transform that implements ITokenizeTransform interface).
            Note: Since WordBagTransform is a many-to-one column transform, for each WordBagTransform.Column
            with multiple sources, ConcatTransform is applied first. The output of ConcatTransform is a
            one-to-one column which is in turn the input to a tokenize transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractorTransform">
            <summary>
            A transform that turns a collection of tokenized text (vector of ReadOnlyMemory), or vectors of keys into numerical
            feature vectors. The feature vectors are counts of ngrams (sequences of consecutive *tokens* -words or keys-
            of length 1-n).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractorTransform.ArgumentsBase">
            <summary>
            This class is a merger of <see cref="T:Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer.Arguments"/> and
            <see cref="T:Microsoft.ML.Transforms.Text.NgramExtractingTransformer.Arguments"/>, with the allLength option removed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TermLoaderArguments">
            <summary>
            Arguments for defining custom list of terms or data file containing the terms.
            The class includes a subset of <see cref="T:Microsoft.ML.Transforms.Conversions.ValueToKeyMappingTransformer"/>'s arguments.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.INgramExtractorFactory">
            <summary>
            An ngram extractor factory interface to create an ngram extractor transform.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.INgramExtractorFactory.UseHashingTrick">
            <summary>
            Whether the extractor transform created by this factory uses the hashing trick
            (by using <see cref="T:Microsoft.ML.Transforms.Conversions.HashingTransformer"/> or <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingTransformer"/>, for example).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractorFactory">
            <summary>
            An implementation of <see cref="T:Microsoft.ML.Transforms.Text.INgramExtractorFactory"/> to create <see cref="T:Microsoft.ML.Transforms.Text.NgramExtractorTransform"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramHashExtractorFactory">
            <summary>
            An implementation of <see cref="T:Microsoft.ML.Transforms.Text.INgramExtractorFactory"/> to create <see cref="T:Microsoft.ML.Transforms.Text.NgramHashExtractingTransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractionUtils.GenerateUniqueSourceNames(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.ManyToOneColumn[],Microsoft.ML.Runtime.Data.ISchema)">
            <summary>
            Generates and returns unique names for columns source. Each element of the returned array is
            an array of unique source names per specific column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer">
            <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary><remarks>
        <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
        <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
        <para>
          License attributes for pretrained models:
          <list type="bullet">
            <item>
              <description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description>
            </item>
            <item>
              <description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description>
          </item>
        </list>
        </para>
      </remarks>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.ColumnInfo">
            <summary>
            Information for each column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind)">
            <summary>
            Instantiates <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer"/> using the pretrained word embedding model specified by <paramref name="modelKind"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the output column.</param>
            <param name="modelKind">The pretrained word embedding model.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String)">
            <summary>
            Instantiates <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer"/> using the custom word embedding model by loading it from the file specified by the <paramref name="customModelFile"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the output column.</param>
            <param name="customModelFile">Filename for custom word embedding model.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.ColumnInfo[])">
            <summary>
            Instantiates <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer"/> using the pretrained word embedding model specified by <paramref name="modelKind"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="modelKind">The pretrained word embedding model.</param>
            <param name="columns">Input/Output columns.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.ColumnInfo[])">
            <summary>
            Instantiates <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer"/> using the custom word embedding model by loading it from the file specified by the <paramref name="customModelFile"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="customModelFile">Filename for custom word embedding model.</param>
            <param name="columns">Input/Output columns.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator">
            <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary><remarks>
        <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
        <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
        <para>
          License attributes for pretrained models:
          <list type="bullet">
            <item>
              <description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description>
            </item>
            <item>
              <description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description>
          </item>
        </list>
        </para>
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator"/>
            </summary>
            <param name="env">The local instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/></param>
            <param name="inputColumn">The input column.</param>
            <param name="outputColumn">The optional output column. If it is <value>null</value> the input column will be substituted with its value.</param>
            <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind"/> to use. </param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator"/>
            </summary>
            <param name="env">The local instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/></param>
            <param name="inputColumn">The input column.</param>
            <param name="outputColumn">The optional output column. If it is <value>null</value> the input column will be substituted with its value.</param>
            <param name="customModelFile">The path of the pre-trained embeedings model to use. </param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.ColumnInfo[])">
            <summary>
            Extracts word embeddings.
            </summary>
            <param name="env">The local instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/></param>
            <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind"/> to use. </param>
            <param name="columns">The array columns, and per-column configurations to extract embeedings from.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingsStaticExtensions.WordEmbeddings(Microsoft.ML.StaticPipe.VarVector{System.String},Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind)">
            <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary><remarks>
        <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
        <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
        <para>
          License attributes for pretrained models:
          <list type="bullet">
            <item>
              <description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description>
            </item>
            <item>
              <description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description>
          </item>
        </list>
        </para>
      </remarks>
            <param name="input">Vector of tokenized text.</param>
            <param name="modelKind">The pretrained word embedding model.</param>
            <returns />
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingsStaticExtensions.WordEmbeddings(Microsoft.ML.StaticPipe.VarVector{System.String},System.String)">
            <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary><remarks>
        <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
        <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
        <para>
          License attributes for pretrained models:
          <list type="bullet">
            <item>
              <description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description>
            </item>
            <item>
              <description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description>
          </item>
        </list>
        </para>
      </remarks>
            <param name="input">Vector of tokenized text.</param>
            <param name="customModelFile">The custom word embedding model file.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramHashExtractingTransformer">
            <summary>
            A transform that turns a collection of tokenized text (vector of ReadOnlyMemory) into numerical feature vectors
            using the hashing trick.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramHashExtractingTransformer.ArgumentsBase">
            <summary>
            This class is a merger of <see cref="T:Microsoft.ML.Transforms.Conversions.HashingTransformer.Arguments"/> and
            <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingTransformer.Arguments"/>, with the ordered option,
            the rehashUnigrams option and the allLength option removed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordTokenizingTransformer">
            <summary>
        This transform splits the text into words using the separator character(s).
      </summary><remarks>
        The input for this transform is a ReadOnlyMemory or a vector of ReadOnlyMemory,
        and its output is a vector of ReadOnlyMemory, corresponding to the tokens in the input text.
        The output is generated by splitting the input text, using a set of user specified separator characters.
        Empty strings and strings containing only spaces are dropped.
        This transform is not typically used on its own, but it is one of the transforms composing the Text Featurizer.
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordTokenizingTransformer.ColumnInfo.#ctor(System.String,System.String,System.Char[])">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="input">Name of input column.</param>
            <param name="output">Name of output column.</param>
            <param name="separators">Casing text using the rules of the invariant culture. If not specified, space will be used as separator.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordTokenizingEstimator">
            <summary>
            Word tokenizer splits text into tokens using the delimiter.
            For each text input, the output column is a variable vector of text.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Char[])">
            <summary>
            Tokenize incoming text in <paramref name="inputColumn"/> and output the tokens as <paramref name="outputColumn"/>.
            </summary>
            <param name="env">The environment.</param>
            <param name="inputColumn">The column containing text to tokenize.</param>
            <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="separators">The separators to use (uses space character by default).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.Char[])">
            <summary>
            Tokenize incoming text in input columns and output the tokens.
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
            <param name="separators">The separators to use (uses space character by default).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.WordTokenizingTransformer.ColumnInfo[])">
            <summary>
             Tokenize incoming text in input columns and output the tokens.
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordBagEstimator">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in a given text.
            It does so by building a dictionary of ngrams and using the id in the dictionary as the index in the bag.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumn"/>
            and outputs bag of word vector as <paramref name="outputColumn"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="inputColumn">The column containing text to compute bag of word vector.</param>
            <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String[],System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumns"/>
            and outputs bag of word vector as <paramref name="outputColumn"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="inputColumns">The columns containing text to compute bag of word vector.</param>
            <param name="outputColumn">The column containing output tokens.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String[],System.String}[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to compute bag of word vector.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words of length 1-n) in a given text.
            It does so by hashing each ngram and using the hash value as the index in the bag.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordHashBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumn"/>
            and outputs bag of word vector as <paramref name="outputColumn"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="inputColumn">The column containing text to compute bag of word vector.</param>
            <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordHashBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String[],System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumns"/>
            and outputs bag of word vector as <paramref name="outputColumn"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="inputColumns">The columns containing text to compute bag of word vector.</param>
            <param name="outputColumn">The column containing output tokens.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordHashBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String[],System.String}[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to compute bag of word vector.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramHashEstimator">
             <summary>
             Produces a bag of counts of ngrams (sequences of consecutive words of length 1-n) in a given text.
             It does so by hashing each ngram and using the hash value as the index in the bag.
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumn"/>
             and outputs ngram vector as <paramref name="outputColumn"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="env">The environment.</param>
             <param name="inputColumn">The column containing text to compute bag of word vector.</param>
             <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn"/> is replaced.</param>
             <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String[],System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumns"/>
             and outputs ngram vector as <paramref name="outputColumn"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="env">The environment.</param>
             <param name="inputColumns">The columns containing text to compute bag of word vector.</param>
             <param name="outputColumn">The column containing output tokens.</param>
             <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String[],System.String}[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="columns.inputs.inputs"/>
             and outputs ngram vector for each output in <paramref name="columns.output.output"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="env">The environment.</param>
             <param name="columns">Pairs of columns to compute bag of word vector.</param>
             <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.SignatureFourierDistributionSampler">
            <summary>
            Signature for an IFourierDistributionSampler constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer">
            <summary>
            Lp-Norm (vector/row-wise) normalization transform. Has the following two set of arguments:
            1- Lp-Norm normalizer arguments:
               Normalize rows individually by rescaling them to unit norm (L2, L1 or LInf).
               Performs the following operation on a vector X:
                    Y = (X - M) / D, where M is mean and D is either L2 norm, L1 norm or LInf norm.
               Scaling inputs to unit norms is a common operation for text classification or clustering.
            2- Global contrast normalization (GCN) arguments:
               Performs the following operation on a vector X:
                    Y = (s * X - M) / D, where s is a scale, M is mean and D is either L2 norm or standard deviation.
               Usage examples and Matlab code:
               <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf">https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf</a>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.GcnColumnInfo">
            <summary>
            Describes how the transformer handles one Gcn column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.GcnColumnInfo.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Describes how the transformer handles one Gcn column pair.
            </summary>
            <param name="input">Name of input column.</param>
            <param name="output">Name of output column.</param>
            <param name="substractMean">Subtract mean from each value before normalizing.</param>
            <param name="useStdDev">Normalize by standard deviation rather than L2 norm.</param>
            <param name="scale">Scale features by this value.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.LpNormColumnInfo">
            <summary>
            Describes how the transformer handles one LpNorm column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.LpNormColumnInfo.#ctor(System.String,System.String,System.Boolean,Microsoft.ML.Transforms.Projections.LpNormalizingEstimatorBase.NormalizerKind)">
            <summary>
            Describes how the transformer handles one LpNorm column pair.
            </summary>
            <param name="input">Name of input column.</param>
            <param name="output">Name of output column.</param>
            <param name="substractMean">Subtract mean from each value before normalizing.</param>
            <param name="normalizerKind">The norm to use to normalize each sample.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.ColumnInfoBase">
            <summary>
            Describes base class for one column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.ColumnInfoBase[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.Mapper.StdDev(System.ReadOnlySpan{System.Single},System.Int32)">
            <summary>
            Compute Standard Deviation. In case of both subMean and useStd are true, we technically need to compute variance
            based on centered values (i.e. after subtracting the mean). But since the centered
            values mean is approximately zero, we can use variance of non-centered values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.Mapper.StdDev(System.ReadOnlySpan{System.Single},System.Int32,System.Single)">
            <summary>
            Compute Standard Deviation.
            We have two overloads of StdDev instead of one with <see cref="T:System.Nullable`1"/> mean for perf reasons.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.Mapper.L2Norm(System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Compute L2-norm. L2-norm computation doesn't subtract the mean from the source values.
            However, we substract the mean here in case subMean is true (if subMean is false, mean is zero).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.Mapper.L1Norm(System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Compute L1-norm. L1-norm computation doesn't subtract the mean from the source values.
            However, we substract the mean here in case subMean is true (if subMean is false, mean is zero).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.Mapper.LInfNorm(System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Compute LInf-norm. LInf-norm computation doesn't subtract the mean from the source values.
            However, we substract the mean here in case subMean is true (if subMean is false, mean is zero).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Projections.LpNormalizingEstimatorBase">
            <summary>
            Base estimator class for LpNorm and Gcn normalizers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Projections.LpNormalizingEstimatorBase.NormalizerKind">
            <summary>
            The kind of unit norm vectors are rescaled to. This enumeration is serialized.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingEstimatorBase.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.ColumnInfoBase[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Projections.LpNormalizingEstimatorBase"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Projections.LpNormalizingEstimator">
            <summary>
            Lp Normalizing estimator allow you take columns and normalize them individually by rescaling them to unit norm.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.Projections.LpNormalizingEstimatorBase.NormalizerKind,System.Boolean)">
            <summary>
         The LpNormalizer transforms, normalizes vectors (rows) individually by rescaling them to unit norm (L2, L1 or LInf). 
         <para>Performs the following operation on a vector X:</para> 
         <para>Y = (X - M) / D</para> 
         <para>where M is mean and D is either L2 norm, L1 norm or LInf norm.</para>
       </summary><remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf" />
      </remarks><seealso cref="T:Microsoft.ML.Transforms.Projections.GlobalContrastNormalizingEstimator" /><example>
        <code language="csharp">
          pipeline.Add(new LpNormalizer("FeatureCol")
          { 
              NormKind = LpNormNormalizerTransformNormalizerKind.L1Norm
          });
        </code>
      </example>
            <param name="env">The environment.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the column resulting from the transformation of <paramref name="inputColumn" />. Null means <paramref name="inputColumn" /> is replaced. </param>
            <param name="normKind">Type of norm to use to normalize each sample.</param>
            <param name="substractMean">Subtract mean from each value before normalizing.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],Microsoft.ML.Transforms.Projections.LpNormalizingEstimatorBase.NormalizerKind,System.Boolean)">
            <summary>
         The LpNormalizer transforms, normalizes vectors (rows) individually by rescaling them to unit norm (L2, L1 or LInf). 
         <para>Performs the following operation on a vector X:</para> 
         <para>Y = (X - M) / D</para> 
         <para>where M is mean and D is either L2 norm, L1 norm or LInf norm.</para>
       </summary><remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf" />
      </remarks><seealso cref="T:Microsoft.ML.Transforms.Projections.GlobalContrastNormalizingEstimator" /><example>
        <code language="csharp">
          pipeline.Add(new LpNormalizer("FeatureCol")
          { 
              NormKind = LpNormNormalizerTransformNormalizerKind.L1Norm
          });
        </code>
      </example>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to run the normalization on.</param>
            <param name="normKind">Type of norm to use to normalize each sample.</param>
            <param name="substractMean">Subtract mean from each value before normalizing.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.LpNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.LpNormColumnInfo[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Projections.LpNormalizingEstimator"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Projections.GlobalContrastNormalizingEstimator">
            <summary>
            Global contrast normalizing estimator allow you take columns and performs global constrast normalization on them.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.GlobalContrastNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Boolean,System.Boolean,System.Single)">
            <summary>
        <para>Performs a global contrast normalization on input values:</para>
        <para>Y = (s * X - M) / D</para> 
        <para>where s is a scale, M is mean and D is either the L2 norm or standard deviation.</para>
       </summary><remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: 
        <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf">An Analysis of Single-Layer Networks in Unsupervised Feature Learning</a>
      </remarks><seealso cref="T:Microsoft.ML.Transforms.Projections.LpNormalizingEstimator" /><example>
        <code language="csharp">
          pipeline.Add(new GlobalContrastNormalizer("FeatureCol")
          { 
              SubMean= false
          });
        </code>
      </example>
            <param name="env">The environment.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the column resulting from the transformation of <paramref name="inputColumn" />. Null means <paramref name="inputColumn" /> is replaced. </param>
            <param name="substractMean">Subtract mean from each value before normalizing.</param>
            <param name="useStdDev">Normalize by standard deviation rather than L2 norm.</param>
            <param name="scale">Scale features by this value.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.GlobalContrastNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.Boolean,System.Boolean,System.Single)">
            <summary>
        <para>Performs a global contrast normalization on input values:</para>
        <para>Y = (s * X - M) / D</para> 
        <para>where s is a scale, M is mean and D is either the L2 norm or standard deviation.</para>
       </summary><remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: 
        <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf">An Analysis of Single-Layer Networks in Unsupervised Feature Learning</a>
      </remarks><seealso cref="T:Microsoft.ML.Transforms.Projections.LpNormalizingEstimator" /><example>
        <code language="csharp">
          pipeline.Add(new GlobalContrastNormalizer("FeatureCol")
          { 
              SubMean= false
          });
        </code>
      </example>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to run the normalization on.</param>
            <param name="substractMean">Subtract mean from each value before normalizing.</param>
            <param name="useStdDev">Normalize by standard deviation rather than L2 norm.</param>
            <param name="scale">Scale features by this value.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.GlobalContrastNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.GcnColumnInfo[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.Projections.GlobalContrastNormalizingEstimator"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.RandomFourierFeaturizingTransformer.ColumnInfo.#ctor(System.String,System.String,System.Int32,System.Boolean,Microsoft.ML.Runtime.IComponentFactory{System.Single,Microsoft.ML.Transforms.IFourierDistributionSampler},System.Nullable{System.Int32})">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="input">Name of input column.</param>
            <param name="output">Name of output column.</param>
            <param name="generator">Which fourier generator to use.</param>
            <param name="newDim">The number of random Fourier features to create.</param>
            <param name="useSin">Create two features for every random Fourier frequency? (one for cos and one for sin).</param>
            <param name="seed">The seed of the random number generator for generating the new features (if unspecified, the global random is used.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Projections.RandomFourierFeaturizingEstimator">
            <summary>
            Estimator which takes set of vector columns and maps its input to a random low-dimensional feature space.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.RandomFourierFeaturizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Convinence constructor for simple one column case
            </summary>
            <param name="env">Host Environment.</param>
            <param name="inputColumn">Name of the column to be transformed.</param>
            <param name="outputColumn">Name of the output column. If this is null '<paramref name="inputColumn"/>' will be used.</param>
            <param name="newDim">The number of random Fourier features to create.</param>
            <param name="useSin">Create two features for every random Fourier frequency? (one for cos and one for sin).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Projections.RffExtenensions.LowerVectorSizeWithRandomFourierTransformation(Microsoft.ML.StaticPipe.Vector{System.Single},System.Int32,System.Boolean,Microsoft.ML.Runtime.IComponentFactory{System.Single,Microsoft.ML.Transforms.IFourierDistributionSampler},System.Nullable{System.Int32})">
            <summary>
            It maps input to a random low-dimensional feature space. It is useful when data has non-linear features, since the transform
            is designed so that the inner products of the transformed data are approximately equal to those in the feature space of a user
            speciﬁed shift-invariant kernel. With this transform, we are able to use linear methods (which are scalable) to approximate more complex kernel SVM models.
            </summary>
            <param name="input">The column to apply Random Fourier transfomration.</param>
            <param name="newDim">Expected size of new vector.</param>
            <param name="useSin">Create two features for every random Fourier frequency? (one for cos and one for sin) </param>
            <param name="generator">Which kernel to use. (<see cref="T:Microsoft.ML.Transforms.GaussianFourierSampler"/> by default)</param>
            <param name="seed">The seed of the random number generator for generating the new features. If not specified global random would be used.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.GroupTransform">
             <summary>
             A Trasforms that groups values of a scalar column into a vector, by a contiguous group ID.
             </summary>
             <remarks>
             <p>This transform essentially performs the following SQL-like operation:</p>
             <p>SELECT GroupKey1, GroupKey2, ... GroupKeyK, LIST(Value1), LIST(Value2), ... LIST(ValueN)
             FROM Data
             GROUP BY GroupKey1, GroupKey2, ... GroupKeyK.</p>
            
             <p>It assumes that the group keys are contiguous (if a new group key sequence is encountered, the group is over).
             The GroupKeyN and ValueN columns can be of any primitive types. The code requires that every raw type T of the group key column
             is an <see cref="T:System.IEquatable`1"/>, which is currently true for all existing primitive types.
             The produced ValueN columns will be variable-length vectors of the original value column types.</p>
            
             <p>The order of ValueN entries in the lists is preserved.</p>
            
             <example><code>
             Example:
             User Item
             Pete Book
             Tom  Table
             Tom  Kitten
             Pete Chair
             Pete Cup
            
             Result:
             User Item
             Pete [Book]
             Tom  [Table, Kitten]
             Pete [Chair, Cup]
             </code></example>
             </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.GroupTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.String,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.GroupTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="groupKey">Columns to group by</param>
            <param name="columns">Columns to group together</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.GroupTransform.GroupSchema">
             <summary>
             For group columns, the schema information is intact.
            
             For keep columns, the type is Vector of original type and variable length.
             The only metadata preserved is the KeyNames and IsNormalized.
            
             All other columns are dropped.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.GroupTransform.Cursor">
             <summary>
             This cursor will create two cursors on the input data view:
             - The leading cursor will activate all the group columns, and will advance until it hits the end of the contiguous group.
             - The trailing cursor will activate all the requested columns, and will go through the group
                 (as identified by the leading cursor), and aggregate the keep columns.
            
             The getters are as follows:
             - The group column getters are taken directly from the trailing cursor.
             - The keep column getters are provided by the aggregators.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.GroupTransform.Cursor.GroupKeyColumnChecker">
            <summary>
            This class keeps track of the previous group key and tests the current group key against the previous one.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.GroupTransform.Cursor.KeepColumnAggregator">
            <summary>
            This class handles the aggregation of one 'keep' column into a vector. It wraps around an <see cref="T:Microsoft.ML.Runtime.Data.IRow"/>'s
            column, reads the data and aggregates.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Conversions.HashJoiningTransform">
            <summary>
            This transform hashes its input columns. Each column is hashed separately, and within each
            column there is an option to specify which slots should be hashed together into one output slot.
            This transform can be applied either to single valued columns or to known length vector columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ColumnInfoEx.GetItemType(System.Int32)">
            <summary>
            Constructs the correct KeyType for the given hash bits.
            Because of array size limitation, if hashBits = 31, the key type is not contiguous (not transformable into indicator array)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.HashJoiningTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.Conversions.HashJoiningTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="name">Name of the output column.</param>
            <param name="source">Name of the column to be transformed. If this is null '<paramref name="name"/>' will be used.</param>
            <param name="join">Whether the values need to be combined for a single hash.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 31, inclusive.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.HashJoiningTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Conversions.HashJoiningTransform.Arguments,Microsoft.ML.Runtime.Data.IDataView)">
            <summary>
        Converts multiple column values into hashes. 
        This transform accepts both numeric and text inputs, both single and vector-valued columns. 
      </summary><remarks>
        This transform can be helpful for ranking and cross-validation. In the case of ranking, where the GroupIdColumn column is required,
        and needs to be of a key type you can use the <see cref="T:Microsoft.ML.Transforms.CategoricalHashOneHotVectorizer" /> to hash the text value of a single GroupID column into a key value.
        If the GroupID is the combination of the values from multiple columns, you can use the HashConverter to hash multiple text columns into one key column. 
        Similarly with CrossValidator and the StratificationColumn. 
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeGetterOneToOne``1(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
            Getter generator for inputs of type <typeparamref name="TSrc"/>
            </summary>
            <typeparam name="TSrc">Input type. Must be a non-vector</typeparam>
            <param name="input">Row inout</param>
            <param name="iinfo">Index of the getter</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeGetterVecToVec``1(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
            Getter generator for inputs of type <typeparamref name="TSrc"/>, where output type is a vector of hashes
            </summary>
            <typeparam name="TSrc">Input type. Must be a vector</typeparam>
            <param name="input">Row input</param>
            <param name="iinfo">Index of the getter</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeGetterVecToOne``1(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
            Getter generator for inputs of type <typeparamref name="TSrc"/>, where output type is a single hash
            </summary>
            <typeparam name="TSrc">Input type. Must be a vector</typeparam>
            <param name="input">Row input</param>
            <param name="iinfo">Index of the getter</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeHashDelegate``1">
            <summary>
            Generic hash function
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeFloatHashDelegate">
            <summary>
            Generate a specialized hash function for floats
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.HashJoiningTransform.ComposeDoubleHashDelegate">
            <summary>
            Generate a specialized hash function for doubles
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.KeyToBinaryVectorMappingTransformer.Mapper.MakeGetterOne(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
            This is for the scalar case.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.KeyToBinaryVectorMappingTransformer.Mapper.MakeGetterInd(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
            This is for the indicator case - vector input and outputs should be concatenated.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Conversions.KeyToBinaryVectorExtensions">
            <summary>
            Extension methods for the static-pipeline over <see cref="T:Microsoft.ML.StaticPipe.PipelineColumn"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.KeyToBinaryVectorExtensions.ToBinaryVector``2(Microsoft.ML.StaticPipe.Key{``0,``1})">
            <summary>
            Takes a column of key type of known cardinality and produces a vector of bits representing the key in binary form.
            The first value is encoded as all zeros and missing values are encoded as all ones.
            In the case where a vector has multiple keys, the encoded values are concatenated.
            Number of bits per key is determined as the number of bits needed to represent the cardinality of the keys plus one.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.KeyToBinaryVectorExtensions.ToBinaryVector``2(Microsoft.ML.StaticPipe.Vector{Microsoft.ML.StaticPipe.Key{``0,``1}})">
            <summary>
            Takes a column of key type of known cardinality and produces a vector of bits representing the key in binary form.
            The first value is encoded as all zeros and missing values are encoded as all ones.
            In the case where a vector has multiple keys, the encoded values are concatenated.
            Number of bits per key is determined as the number of bits needed to represent the cardinality of the keys plus one.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.KeyToBinaryVectorExtensions.ToBinaryVector``2(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{``0,``1}})">
            <summary>
            Takes a column of key type of known cardinality and produces a vector of bits representing the key in binary form.
            The first value is encoded as all zeros and missing values are encoded as all ones.
            In the case where a vector has multiple keys, the encoded values are concatenated.
            Number of bits per key is determined as the number of bits needed to represent the cardinality of the keys plus one.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.KeyToBinaryVectorExtensions.ToBinaryVector``1(Microsoft.ML.StaticPipe.Key{``0})">
            <summary>
            Takes a column of key type of known cardinality and produces a vector of bits representing the key in binary form.
            The first value is encoded as all zeros and missing values are encoded as all ones.
            In the case where a vector has multiple keys, the encoded values are concatenated.
            Number of bits per key is determined as the number of bits needed to represent the cardinality of the keys plus one.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.KeyToBinaryVectorExtensions.ToBinaryVector``1(Microsoft.ML.StaticPipe.Vector{Microsoft.ML.StaticPipe.Key{``0}})">
            <summary>
            Takes a column of key type of known cardinality and produces a vector of bits representing the key in binary form.
            The first value is encoded as all zeros and missing values are encoded as all ones.
            In the case where a vector has multiple keys, the encoded values are concatenated.
            Number of bits per key is determined as the number of bits needed to represent the cardinality of the keys plus one.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Conversions.KeyToBinaryVectorExtensions.ToBinaryVector``1(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{``0}})">
            <summary>
            Takes a column of key type of known cardinality and produces a vector of bits representing the key in binary form.
            The first value is encoded as all zeros and missing values are encoded as all ones.
            In the case where a vector has multiple keys, the encoded values are concatenated.
            Number of bits per key is determined as the number of bits needed to represent the cardinality of the keys plus one.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LearnerFeatureSelectionTransform">
            <summary>
            Selects the slots for which the absolute value of the corresponding weight in a linear learner
            is greater than a threshold.
            Instantiates a DropSlots transform to actually drop the slots.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LearnerFeatureSelectionTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.LearnerFeatureSelectionTransform.Arguments,Microsoft.ML.Runtime.Data.IDataView)">
            <summary>
            Create method corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LearnerFeatureSelectionTransform.Train(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Transforms.LearnerFeatureSelectionTransform.Arguments,Microsoft.ML.Runtime.Data.VBuffer{System.Single}@)">
            <summary>
            Returns a score for each slot of the features column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LoadTransform">
            <summary>
            Load specific transforms from the specified model file. Allows one to 'cherry pick' transforms from
            a serialized chain, or to apply a pre-trained transform to a different (but still compatible) data view.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LoadTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.String,System.String[],System.Boolean)">
            <summary>
            A helper method to create <see cref="T:Microsoft.ML.Transforms.LoadTransform"/> for public facing API.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="modelFile">Model file to load the transforms from.</param>
            <param name="tag">The tags (comma-separated) to be loaded (or omitted, if complement is true).</param>
            <param name="complement">Whether to load all transforms except those marked by tags.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueDroppingTransformer">
            <member name="NADrop">
      <summary>
        Removes missing values from vector type columns.
      </summary>
    </member>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueDroppingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.MissingValueDroppingTransformer"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="columns">The names of the input columns of the transformation and the corresponding names for the output columns.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueDroppingTransformer.Save(Microsoft.ML.Runtime.Model.ModelSaveContext)">
            <summary>
            Saves the transform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueDroppingTransformer.Mapper.GetIsNADelegate(Microsoft.ML.Runtime.Data.ColumnType)">
            <summary>
            Returns the isNA predicate for the respective type.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueDroppingEstimator">
            <summary>
            Drops missing values from columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueDroppingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Drops missing values from columns.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="columns">The names of the input columns of the transformation and the corresponding names for the output columns.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueDroppingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String)">
            <summary>
            Drops missing values from columns.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="input">The name of the input column of the transformation.</param>
            <param name="output">The name of the column produced by the transformation.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueDroppingEstimator.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)">
            <summary>
            Returns the schema that would be produced by the transformation.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueHandlingTransformer">
            <!-- No matching elements were found for the following include tag --><include file="doc.xml" path="doc/members/member[@name=&quot;NAHandle&quot;]" />
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueHandlingTransformer.ReplacementKind.DefaultValue">
            <summary>
            Replace with the default value of the column based on its type. For example, 'zero' for numeric and 'empty' for string/text columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueHandlingTransformer.ReplacementKind.Mean">
            <summary>
            Replace with the mean value of the column. Supports only numeric/time span/ DateTime columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueHandlingTransformer.ReplacementKind.Minimum">
            <summary>
            Replace with the minimum value of the column. Supports only numeric/time span/ DateTime columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueHandlingTransformer.ReplacementKind.Maximum">
            <summary>
            Replace with the maximum value of the column. Supports only numeric/time span/ DateTime columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueHandlingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.String,System.String,Microsoft.ML.Transforms.MissingValueHandlingTransformer.ReplacementKind)">
            <summary>
            A helper method to create <see cref="T:Microsoft.ML.Transforms.MissingValueHandlingTransformer"/> for public facing API.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="name">Name of the output column.</param>
            <param name="source">Name of the column to be transformed. If this is null '<paramref name="name"/>' will be used.</param>
            <param name="replaceWith">The replacement method to utilize.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.MissingValueIndicatorTransform.Arguments,Microsoft.ML.Runtime.Data.IDataView)">
            <summary>
            Public constructor corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueIndicatorTransformer">
            <member name="NAIndicator">
      <summary>
        This transform can transform either scalars or vectors (both fixed and variable size),
        creating output columns that indicate, through the true/false booleans whether the row has a missing value.
      </summary>
    </member>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.MissingValueIndicatorTransformer"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="columns">The names of the input columns of the transformation and the corresponding names for the output columns.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Save(Microsoft.ML.Runtime.Model.ModelSaveContext)">
            <summary>
            Saves the transform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Mapper.GetIsNADelegate(Microsoft.ML.Runtime.Data.ColumnType)">
            <summary>
            Returns the isNA predicate for the respective type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Mapper.ComposeGetterOne(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
            Getter generator for single valued inputs.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Mapper.ComposeGetterVec(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
            Getter generator for vector valued inputs.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Mapper.FindNAs``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.InPredicate{``0},System.Boolean,System.Collections.Generic.List{System.Int32},System.Boolean@)">
            <summary>
            Adds all NAs (or non-NAs) to the indices List.  Whether NAs or non-NAs have been added is indicated by the bool sense.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Mapper.FillValues(System.Int32,Microsoft.ML.Runtime.Data.VBuffer{System.Boolean}@,System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
             Fills indicator values for vectors.  The indices is a list that either holds all of the NAs or all
             of the non-NAs, indicated by sense being true or false respectively.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.MissingValueIndicatorEstimator"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="columns">The names of the input columns of the transformation and the corresponding names for the output columns.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.MissingValueIndicatorEstimator"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="input">The name of the input column of the transformation.</param>
            <param name="output">The name of the column produced by the transformation.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorEstimator.GetOutputSchema(Microsoft.ML.Core.Data.SchemaShape)">
            <summary>
            Returns the schema that would be produced by the transformation.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.NAIndicatorExtensions">
            <summary>
            Extension methods for the static-pipeline over <see cref="T:Microsoft.ML.StaticPipe.PipelineColumn"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAIndicatorExtensions.IsMissingValue(Microsoft.ML.StaticPipe.Scalar{System.Single})">
            <summary>
            Produces a column of boolean entries indicating whether input column entries were missing.
            </summary>
            <param name="input">The input column.</param>
            <returns>A column indicating whether input column entries were missing.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAIndicatorExtensions.IsMissingValue(Microsoft.ML.StaticPipe.Scalar{System.Double})">
            <summary>
            Produces a column of boolean entries indicating whether input column entries were missing.
            </summary>
            <param name="input">The input column.</param>
            <returns>A column indicating whether input column entries were missing.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAIndicatorExtensions.IsMissingValue(Microsoft.ML.StaticPipe.Vector{System.Single})">
            <summary>
            Produces a column of boolean entries indicating whether input column entries were missing.
            </summary>
            <param name="input">The input column.</param>
            <returns>A column indicating whether input column entries were missing.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAIndicatorExtensions.IsMissingValue(Microsoft.ML.StaticPipe.Vector{System.Double})">
            <summary>
            Produces a column of boolean entries indicating whether input column entries were missing.
            </summary>
            <param name="input">The input column.</param>
            <returns>A column indicating whether input column entries were missing.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAIndicatorExtensions.IsMissingValue(Microsoft.ML.StaticPipe.VarVector{System.Single})">
            <summary>
            Produces a column of boolean entries indicating whether input column entries were missing.
            </summary>
            <param name="input">The input column.</param>
            <returns>A column indicating whether input column entries were missing.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAIndicatorExtensions.IsMissingValue(Microsoft.ML.StaticPipe.VarVector{System.Double})">
            <summary>
            Produces a column of boolean entries indicating whether input column entries were missing.
            </summary>
            <param name="input">The input column.</param>
            <returns>A column indicating whether input column entries were missing.</returns>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer">
            <summary>
        Create an output column of the same type and size of the input column, 
        where missing values are replaced with either the default value or the mean/min/max value (for non-text columns only). 
      </summary><remarks>
        This transform can transform either scalars or vectors (both fixed and variable size),
        creating output columns that are identical to the input columns except for replacing NA values
        with either the default value, user input, or imputed values (min/max/mean are currently supported).
        Imputation modes are supported for vectors both by slot and across all slots.
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.#ctor(System.String,System.String,Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode,System.Boolean)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="input">Name of input column.</param>
            <param name="output">Name of output column.</param>
            <param name="replacementMode">What to replace the missing value with.</param>
            <param name="imputeBySlot">If true, per-slot imputation of replacement is performed.
            Otherwise, replacement value is imputed for the entire vector column. This setting is ignored for scalars and variable vectors,
            where imputation is always for the entire column.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.GetReplacementValues(Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo[],System.Object[]@,System.Collections.BitArray[]@,Microsoft.ML.Runtime.Data.ColumnType[]@)">
            <summary>
            Fill the repValues array with the correct replacement values based on the user-given replacement kinds.
            Vectors default to by-slot imputation unless otherwise specified, except for unknown sized vectors
            which force across-slot imputation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.GetIsNADelegate(Microsoft.ML.Runtime.Data.ColumnType)">
            <summary>
            Returns the isNA predicate for the respective type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.GetSpecifiedValue(System.String,Microsoft.ML.Runtime.Data.ColumnType,System.Delegate)">
            <summary>
            Converts a string to its respective value in the corresponding type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.ComposeGetterOne(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
            Getter generator for single valued inputs.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.ComposeGetterOne``1(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
             Replaces NA values for scalars.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.ComposeGetterVec(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
            Getter generator for vector valued inputs.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.ComposeGetterVec``1(Microsoft.ML.Runtime.Data.IRow,System.Int32)">
            <summary>
             Replaces NA values for vectors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.FillValues``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.InPredicate{``0},``0,System.Boolean)">
            <summary>
             Fills values for vectors where there is one replacement value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.FillValues``1(Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.VBuffer{``0}@,Microsoft.ML.Runtime.Data.InPredicate{``0},``0[],System.Collections.BitArray)">
            <summary>
             Fills values for vectors where there is slot-wise replacement values.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer.StatAggregator">
            <summary>
            The base class for stat aggregators for imputing mean, min, and max for the NAReplaceTransform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer.StatAggregator`2">
            <summary>
            The base class for stat aggregators with knowledge of types.
            </summary>
            <typeparam name="TValue">The type for the column being aggregated.</typeparam>
            <typeparam name="TStat">The type of the stat being computed by the stat aggregator.</typeparam>
        </member>
        <member name="P:Microsoft.ML.Transforms.MissingValueReplacingTransformer.StatAggregator`2.RowCount">
            <summary>
            Returns the number of times that ProcessRow has been called.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.MissingValueReplacingTransformer.StatAggregatorAcrossSlots`2.ValueCount">
            <summary>
            Returns the number of values that have been processed so far.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.MissingValueReplacingTransformer.MinMaxAggregatorAcrossSlots`2.ValuesProcessed">
            <summary>
            Returns the number of times that ProcessValue has been called.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer.MeanStatDouble">
            <summary>
            This is a mutable struct (so is evil). However, its scope is restricted
            and the only instances are in a field or an array, so the mutation does
            the right thing.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer.MeanStatInt">
            <summary>
            A mutable struct for keeping the appropriate statistics for mean calculations for IX types, TS, and DT,
            whose scope is restricted and only exists as an instance in a field or an array, utilizing the mutation
            of the struct correctly.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.NAReplacerExtensions">
            <summary>
            Extension methods for the static-pipeline over <see cref="T:Microsoft.ML.StaticPipe.PipelineColumn"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAReplacerExtensions.ReplaceNaNValues(Microsoft.ML.StaticPipe.Scalar{System.Single},Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode)">
            <summary>
            Scan through all rows and replace NaN values according to replacement strategy.
            </summary>
            <param name="input">Incoming data.</param>
            <param name="replacementMode">How NaN should be replaced</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAReplacerExtensions.ReplaceNaNValues(Microsoft.ML.StaticPipe.Scalar{System.Double},Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode)">
            <summary>
            Scan through all rows and replace NaN values according to replacement strategy.
            </summary>
            <param name="input">Incoming data.</param>
            <param name="replacementMode">How NaN should be replaced</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAReplacerExtensions.ReplaceNaNValues(Microsoft.ML.StaticPipe.Vector{System.Single},Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode,System.Boolean)">
            <summary>
            Scan through all rows and replace NaN values according to replacement strategy.
            </summary>
            <param name="input">Incoming data.</param>
            <param name="replacementMode">How NaN should be replaced</param>
            <param name="imputeBySlot">If true, per-slot imputation of replacement is performed.
            Otherwise, replacement value is imputed for the entire vector column. This setting is ignored for scalars and variable vectors,
            where imputation is always for the entire column.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAReplacerExtensions.ReplaceNaNValues(Microsoft.ML.StaticPipe.Vector{System.Double},Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode,System.Boolean)">
            <summary>
            Scan through all rows and replace NaN values according to replacement strategy.
            </summary>
            <param name="input">Incoming data.</param>
            <param name="replacementMode">How NaN should be replaced</param>
            <param name="imputeBySlot">If true, per-slot imputation of replacement is performed.
            Otherwise, replacement value is imputed for the entire vector column. This setting is ignored for scalars and variable vectors,
            where imputation is always for the entire column.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAReplacerExtensions.ReplaceNaNValues(Microsoft.ML.StaticPipe.VarVector{System.Single},Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode)">
            <summary>
            Scan through all rows and replace NaN values according to replacement strategy.
            </summary>
            <param name="input">Incoming data.</param>
            <param name="replacementMode">How NaN should be replaced</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAReplacerExtensions.ReplaceNaNValues(Microsoft.ML.StaticPipe.VarVector{System.Double},Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode)">
            <summary>
            Scan through all rows and replace NaN values according to replacement strategy.
            </summary>
            <param name="input">Incoming data.</param>
            <param name="replacementMode">How NaN should be replaced</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer">
            <summary>
        Converts the categorical value into an indicator array by building a dictionary of categories based on the data and using the id in the dictionary as the index in the array
      </summary><remarks>
        <para>
        The CategoricalOneHotVectorizer transform passes through a data set, operating on text columns, to
        build a dictionary of categories.
        For each row, the entire text string appearing in the input column is defined as a category.</para>
        <para>The output of this transform is an indicator vector.</para>
        Each slot in this vector corresponds to a category in the dictionary, so its length is the size of the built dictionary.
        <para>The CategoricalOneHotVectorizer can be applied to one or more columns, in which case it builds and uses a separate dictionary
        for each column that it is applied to.</para>
        
        <para>The <see cref="T:Microsoft.ML.Transforms.CategoricalTransformOutputKind" /> produces integer values and KeyType columns.
        The Key value is the one-based index of the slot set in the Ind/Bag options.
        If the Key option is not found, it is assigned the value zero.
        In the <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Ind" />, <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Bag" /> options are not found, they result in an all zero bit vector.
        <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Ind" /> and <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Bag" /> differ simply in how the bit-vectors generated from individual slots are aggregated:
        for Ind they are concatenated and for Bag they are added.
        When the source column is a singleton, the Ind and Bag options are identical.</para>
      </remarks>
        </member>
        <member name="F:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.OutputKind.Bag">
            <summary>
            Output is a bag (multi-set) vector
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.OutputKind.Ind">
            <summary>
            Output is an indicator vector
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.OutputKind.Key">
            <summary>
            Output is a key value
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.OutputKind.Bin">
            <summary>
            Output is binary encoded
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Categorical.OneHotEncodingEstimator">
            <summary>
            Estimator which takes set of columns and produce for each column indicator array.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Categorical.OneHotEncodingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.OutputKind)">
            Initializes an instance of the <see cref="T:Microsoft.ML.Transforms.Categorical.OneHotEncodingEstimator"/>.
            <param name="env">Host Environment.</param>
            <param name="inputColumn">Name of the column to be transformed.</param>
            <param name="outputColumn">Name of the output column. If this is <c>null</c>, <paramref name="inputColumn"/> is used.</param>
            <param name="outputKind">The type of output expected.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Categorical.OneHotHashEncodingTransformer.Arguments">
            <summary>
            This class is a merger of <see cref="T:Microsoft.ML.Transforms.Conversions.HashingTransformer.Arguments"/> and <see cref="T:Microsoft.ML.Transforms.Conversions.KeyToVectorMappingTransformer.Arguments"/>
            with join option removed
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Categorical.OneHotHashEncodingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.OutputKind)">
            <summary>
            A helper method to create <see cref="T:Microsoft.ML.Transforms.Categorical.OneHotHashEncodingTransformer"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="name">Name of the output column.</param>
            <param name="source">Name of the column to be transformed. If this is null '<paramref name="name"/>' will be used.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
            <param name="outputKind">The type of output expected.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Categorical.OneHotHashEncodingEstimator">
            <summary>
            Estimator which takes set of columns and produce for each column indicator array. Use hashing to determine indicator position.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Categorical.OneHotHashEncodingEstimator.ColumnInfo.#ctor(System.String,System.String,Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.OutputKind,System.Int32,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="input">Name of input column.</param>
            <param name="output">Name of output column.</param>
            <param name="outputKind">Kind of output: bag, indicator vector etc.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 31, inclusive.</param>
            <param name="seed">Hashing seed.</param>
            <param name="ordered">Whether the position of each term should be included in the hash.</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Categorical.OneHotHashEncodingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.OutputKind)">
            A helper method to create <see cref="T:Microsoft.ML.Transforms.Categorical.OneHotHashEncodingEstimator"/> for public facing API.
            <param name="env">Host Environment.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the output column. If this is null '<paramref name="inputColumn"/>' will be used.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
            <param name="outputKind">The type of output expected.</param>
        </member>
        <member name="F:Microsoft.ML.Transforms.Categorical.CategoricalHashStaticExtensions.OneHotHashVectorOutputKind.Bag">
            <summary>
            Output is a bag (multi-set) vector
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Categorical.CategoricalHashStaticExtensions.OneHotHashVectorOutputKind.Ind">
            <summary>
            Output is an indicator vector
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Categorical.CategoricalHashStaticExtensions.OneHotHashVectorOutputKind.Bin">
            <summary>
            Output is binary encoded
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Categorical.CategoricalHashStaticExtensions.OneHotHashScalarOutputKind.Ind">
            <summary>
            Output is an indicator vector
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Categorical.CategoricalHashStaticExtensions.OneHotHashScalarOutputKind.Bin">
            <summary>
            Output is binary encoded
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Categorical.CategoricalHashStaticExtensions.OneHotHashEncoding(Microsoft.ML.StaticPipe.Scalar{System.String},Microsoft.ML.Transforms.Categorical.CategoricalHashStaticExtensions.OneHotHashScalarOutputKind,System.Int32,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Converts the categorical value into an indicator array by hashing categories into certain value and using that value as the index in the array.
            </summary>
            <param name="input">Incoming data.</param>
            <param name="outputKind">Specify the output type of indicator array: array or binary encoded data.</param>
            <param name="hashBits">Amount of bits to use for hashing.</param>
            <param name="seed">Seed value used for hashing.</param>
            <param name="ordered">Whether the position of each term should be included in the hash.</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Categorical.CategoricalHashStaticExtensions.OneHotHashEncoding(Microsoft.ML.StaticPipe.Vector{System.String},Microsoft.ML.Transforms.Categorical.CategoricalHashStaticExtensions.OneHotHashVectorOutputKind,System.Int32,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Converts the categorical value into an indicator array by building a dictionary of categories based on the data and using the id in the dictionary as the index in the array
            </summary>
            <param name="input">Incoming data.</param>
            <param name="outputKind">Specify the output type of indicator array: array or binary encoded data.</param>
            <param name="hashBits">Amount of bits to use for hashing.</param>
            <param name="seed">Seed value used for hashing.</param>
            <param name="ordered">Whether the position of each term should be included in the hash.</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Categorical.TermLookupTransformer">
            <summary>
            This transform maps text values columns to new columns using a map dataset provided through its arguments.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Categorical.TermLookupTransformer.ValueMap">
            <summary>
            Holds the values that the terms map to.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Categorical.TermLookupTransformer.ValueMap`1">
            <summary>
            Holds the values that the terms map to - where the destination type is TRes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Categorical.TermLookupTransformer.ValueMap`1.Train(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.Runtime.Data.IRowCursor,System.Int32,System.Int32)">
            <summary>
            Bind this value map to the given cursor for "training".
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Categorical.TermLookupTransformer.ValueMap`1.GetGetter(Microsoft.ML.Runtime.Data.ValueGetter{System.ReadOnlyMemory{System.Char}})">
            <summary>
            Given the term getter, produce a value getter from this value map.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Categorical.TermLookupTransformer.OneValueMap`1">
            <summary>
            Holds the values that the terms map to when the destination type is a PrimitiveType (non-vector).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Categorical.TermLookupTransformer.VecValueMap`1">
            <summary>
            Holds the values that the terms map to when the destination type is a VectorType.
            TItem is the represtation type for the vector's ItemType.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Categorical.TermLookupTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Categorical.TermLookupTransformer.Arguments,Microsoft.ML.Runtime.Data.IDataView)">
            <summary>
            Public constructor corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.OptionalColumnTransform">
            <summary>
        Creates a new column with the specified type and default values.
      </summary><remarks>
        If the user wish to create additional columns with a particular type and default values, or replicated the values from one column to another, changing their type, they can do so using this transform.
        This transform can be used as a workaround to create a Label column after deserializing a model, for prediction.
        Some transforms in the serialized model operate on the Label column, and would throw errors during prediction if such a column is not found.
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.OptionalColumnTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.OptionalColumnTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="columns">Columns to transform.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.OptionalColumnTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.OptionalColumnTransform.Arguments,Microsoft.ML.Runtime.Data.IDataView)">
            <summary>
            Public constructor corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.PermutationFeatureImportance`1.PermuterState">
            <summary>
            This is used as a hack to force Lambda Transform behave sequentially.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.PermutationFeatureImportance`1.FeaturesBuffer">
            <summary>
            Helper structure used for features permutation in Lambda Transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.PermutationFeatureImportance`1.FeatureIndex">
            <summary>
            Helper class for report's Lambda transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.PermutationFeatureImportance`1.FeatureName">
            <summary>
             One more helper class for report's Lambda transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ProduceIdTransform">
             <summary>
             Produces a column with the cursor's ID as a column. This can be useful for diagnostic purposes.
            
             This class will obviously generate different data given different IDs. So, if you save data to
             some other file, then apply this transform to that dataview, it may of course have a different
             result. This is distinct from most transforms that produce results based on data alone.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Arabic">
             <summary>
               Looks up a localized string similar to ب
            ب
            بعد
            حتى
            حين
            دون
            صباح
            في
            قبل
            لكن
            مساء
            مع
            من
            نحو
            واكد
            وفي
            ومن
            اطار
            و
            اثر
            اجل
            احد
            اذا
            اكثر
            اكد
            التي
            الثاني
            الثانية
            الذاتي
            الذي
            الذين
            السابق
            الف
            الماضي
            المقبل
            الوقت
            اليوم
            امس
            انه
            باسم
            بان
            برس
            بسبب
            بشكل
            بعض
            بن
            به
            بها
            بين
            تم
            ثلاثة
            ثم
            جميع
            حاليا
            حوالى
            حول
            حيث
            خلال
            ذلك
            زيارة
            سنة
            سنوات
            شخصا
            صفر
            ضد
            ضمن
            عام
            عاما
            عدة
            عدد
            عدم
            عشر
            عشرة
            على
            عليه
            عليها
            عن
            عند
            عندما
            غدا
            غير
            فان
            فيه
            فيها
            قال
            قد
            قوة
            كان
            كانت
            كل
            كلم
            كما
            لا
            لدى
            لقا [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Czech">
             <summary>
               Looks up a localized string similar to bude
            budeš
            byl
            byla
            byli
            bylo
            je
            jsem
            jsme
            jsou
            jste
            aby
            aj
            ale
            ani
            asi
            až
            bez
            bude-li
            budeme
            budeme-li
            budete
            budete-li
            budeš-li
            budou
            budou-li
            budu
            budu-li
            buď
            buďme
            buďte
            by
            byl-li
            byla-li
            bylas
            byli-li
            bylo-li
            bylos
            byls
            byly
            byly-li
            byt
            byv
            byvše
            byvši
            být
            býti
            co
            což
            cz
            další
            design
            dnes
            do
            email
            ho
            jak
            jako
            je-li
            jeho
            jej
            jejich
            její
            jen
            ještě
            ji
            jine
            již
            jsa
            jsem-li
            jsi
            jsi-li
            jsme-li
            jsou-li
            jsouc
            jsouce
            jste-li
            kam
            kde
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Danish">
             <summary>
               Looks up a localized string similar to af
            andre
            at
            da
            de
            deres
            dette
            din
            ej
            en
            ene
            et
            han
            hans
            i
            ind
            lille
            ni
            ny
            otte
            stor
            store
            syv
            alle
            andet
            begge
            den
            denne
            der
            det
            dig
            dog
            du
            eller
            end
            eneste
            enhver
            fem
            fire
            flere
            fleste
            for
            fordi
            forrige
            fra
            få
            før
            god
            har
            hendes
            her
            hun
            hvad
            hvem
            hver
            hvilken
            hvis
            hvor
            hvordan
            hvorfor
            hvornår
            ikke
            ingen
            intet
            jeg
            jeres
            kan
            kom
            kommer
            lav
            lidt
            man
            mand
            mange
            med
            meget
            men
            mens
            mere
            mig
            ned
            nogen
            noget
            nyt
            nær
            næste
            næsten
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Dutch">
             <summary>
               Looks up a localized string similar to aan
            af
            al
            als
            bij
            dan
            dat
            die
            dit
            een
            en
            er
            had
            heb
            hem
            het
            hij
            hoe
            hun
            ik
            in
            is
            je
            kan
            me
            men
            met
            mij
            nog
            nu
            of
            ons
            ook
            te
            tot
            uit
            van
            was
            wat
            we
            wel
            wij
            zal
            ze
            zei
            zij
            zo
            zou
            .
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.English">
             <summary>
               Looks up a localized string similar to a
            about
            above
            above
            across
            after
            afterwards
            again
            against
            all
            almost
            alone
            along
            already
            also
            although
            always
            am
            among
            amongst
            amoungst
            amount
            an
            and
            another
            any
            anyhow
            anyone
            anything
            anyway
            anywhere
            are
            around
            as
            at
            back
            be
            became
            because
            become
            becomes
            becoming
            been
            before
            beforehand
            behind
            being
            below
            beside
            besides
            between
            beyond
            both
            bottom
            but
            by
            call
            can
            cannot
            cant
            co
            con
            could
            couldnt
            cry
            de
            describe
            detail
            do
            done
            down
            due
            du [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.French">
             <summary>
               Looks up a localized string similar to de
            des
            d&apos;
            la
            du
            l&apos;
            et
            à
            en
            sur
            aux
            par
            pour
            au
            dans
            un
            est
            été
            a
            une
            sous
            ou
            pas
            entre
            qui
            nº
            lès
            plus
            il
            y
            que
            contre
            je
            non
            n&apos;
            sans
            vous
            avec
            ne
            ce
            son
            ses
            mon
            moins
            se
            qu&apos;
            moi
            j&apos;
            c&apos;
            si
            ma
            s&apos;
            être
            tout
            comme
            sa
            sont
            ai
            elle
            autres
            pendant
            chez
            mais
            avant
            nous
            cette
            après
            vers
            était
            tous
            autre
            tu
            très
            même
            ont
            anti
            puis
            leur
            où
            lui
            ça
            suis
            depuis
            ni
            mes
            près
            hors
            outre
            ils
            votre
            toi
            lors
            t&apos;
            aussi
            donc
            ces
            toute
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.German">
             <summary>
               Looks up a localized string similar to a
            ab
            aber
            aber
            ach
            acht
            achte
            achten
            achter
            achtes
            ag
            alle
            allein
            allem
            allen
            aller
            allerdings
            alles
            allgemeinen
            als
            als
            also
            am
            an
            andere
            anderen
            andern
            anders
            au
            auch
            auch
            auf
            aus
            ausser
            außer
            ausserdem
            außerdem
            b
            bald
            bei
            beide
            beiden
            beim
            beispiel
            bekannt
            bereits
            besonders
            besser
            besten
            bin
            bis
            bisher
            bist
            c
            d
            da
            dabei
            dadurch
            dafür
            dagegen
            daher
            dahin
            dahinter
            damals
            damit
            danach
            daneben
            dank
            dann
            daran
            darauf
            daraus
            darf
            darfst
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Italian">
             <summary>
               Looks up a localized string similar to a
            adesso
            ai
            al
            alla
            allo
            allora
            altre
            altri
            altro
            anche
            ancora
            avere
            aveva
            avevano
            ben
            buono
            che
            chi
            cinque
            comprare
            con
            consecutivi
            consecutivo
            cosa
            cui
            da
            del
            della
            dello
            dentro
            deve
            devo
            di
            doppio
            due
            e
            ecco
            fare
            fine
            fino
            fra
            gente
            giù
            ha
            hai
            hanno
            ho
            il
            indietro
            invece
            io
            la
            lavoro
            le
            lei
            lo
            loro
            lui
            lungo
            ma
            me
            meglio
            molta
            molti
            molto
            nei
            nella
            no
            noi
            nome
            nostro
            nove
            nuovi
            nuovo
            o
            oltre
            ora
            otto
            peggio
            pero
            persone
            più [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Japanese">
             <summary>
               Looks up a localized string similar to これ
            それ
            あれ
            この
            その
            あの
            ここ
            そこ
            あそこ
            こちら
            どこ
            だれ
            なに
            なん
            何
            私
            貴方
            貴方方
            我々
            私達
            あの人
            あのかた
            彼女
            彼
            です
            あります
            おります
            います
            は
            が
            の
            に
            を
            で
            え
            から
            まで
            より
            も
            どの
            と
            し
            それで
            しかし
            .
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Norwegian_Bokmal">
             <summary>
               Looks up a localized string similar to alle
            andre
            arbeid
            av
            begge
            bort
            bra
            bruke
            da
            denne
            der
            deres
            det
            din
            disse
            du
            eller
            en
            ene
            eneste
            enhver
            enn
            er
            et
            folk
            for
            fordi
            forsøke
            fra
            få
            før
            først
            gjorde
            gjøre
            god
            gå
            ha
            hadde
            han
            hans
            hennes
            her
            hva
            hvem
            hver
            hvilken
            hvis
            hvor
            hvordan
            hvorfor
            i
            ikke
            inn
            innen
            kan
            kunne
            lage
            lang
            lik
            like
            makt
            mange
            med
            meg
            meget
            men
            mens
            mer
            mest
            min
            mye
            må
            måte
            navn
            nei
            ny
            nå
            når
            og
            også
            om
            opp
            oss
            over
            part
            punkt
            på
            rett
            rikti [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Polish">
             <summary>
               Looks up a localized string similar to ach
            aj
            albo
            bardzo
            bez
            bo
            być
            ci
            ciebie
            cię
            co
            czy
            daleko
            dla
            dlaczego
            dlatego
            do
            dobrze
            dokąd
            dość
            dużo
            dwa
            dwaj
            dwie
            dwoje
            dzisiaj
            dziś
            gdyby
            gdzie
            go
            ich
            ile
            im
            inny
            ja
            jak
            jakby
            jaki
            je
            jeden
            jedna
            jedno
            jego
            jej
            jemu
            jest
            jestem
            jeśli
            jeżeli
            już
            ją
            każdy
            kiedy
            kierunku
            kto
            ku
            lub
            ma
            mają
            mam
            mi
            mnie
            mną
            moi
            moja
            moje
            może
            mu
            my
            mój
            na
            nam
            nami
            nas
            nasi
            nasz
            nasza
            nasze
            natychmiast
            nic
            nich
            nie
            niego
            niej
            niemu
            nigdy
            n [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Portuguese">
             <summary>
               Looks up a localized string similar to último
            é
            acerca
            agora
            algumas
            alguns
            ali
            ambos
            antes
            apontar
            aquela
            aquelas
            aquele
            aqueles
            aqui
            atrás
            bem
            bom
            cada
            caminho
            cima
            com
            como
            comprido
            conhecido
            corrente
            das
            debaixo
            dentro
            desde
            desligado
            deve
            devem
            deverá
            direita
            diz
            dizer
            dois
            dos
            e
            ela
            ele
            eles
            em
            enquanto
            então
            está
            estão
            estado
            estar
            estará
            este
            estes
            esteve
            estive
            estivemos
            estiveram
            eu
            fará
            faz
            fazer
            fazia
            fez
            fim
            foi
            fora
            horas
            iniciar
            inicio
            ir
            irá
            isto
            ligado
            maio [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Portuguese_Brazilian">
             <summary>
               Looks up a localized string similar to último
            é
            acerca
            agora
            algumas
            alguns
            ali
            ambos
            antes
            apontar
            aquela
            aquelas
            aquele
            aqueles
            aqui
            atrás
            bem
            bom
            cada
            caminho
            cima
            com
            como
            comprido
            conhecido
            corrente
            das
            debaixo
            dentro
            desde
            desligado
            deve
            devem
            deverá
            direita
            diz
            dizer
            dois
            dos
            e
            ela
            ele
            eles
            em
            enquanto
            então
            está
            estão
            estado
            estar
            estará
            este
            estes
            esteve
            estive
            estivemos
            estiveram
            eu
            fará
            faz
            fazer
            fazia
            fez
            fim
            foi
            fora
            horas
            iniciar
            inicio
            ir
            irá
            isto
            ligado
            maio [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Russian">
             <summary>
               Looks up a localized string similar to а
            е
            и
            ж
            м
            о
            на
            не
            ни
            об
            но
            он
            мне
            мои
            мож
            она
            они
            оно
            мной
            много
            многочисленное
            многочисленная
            многочисленные
            многочисленный
            мною
            мой
            мог
            могут
            можно
            может
            можхо
            мор
            моя
            моё
            мочь
            над
            нее
            оба
            нам
            нем
            нами
            ними
            мимо
            немного
            одной
            одного
            менее
            однажды
            однако
            меня
            нему
            меньше
            ней
            наверху
            него
            ниже
            мало
            надо
            один
            одиннадцать
            одиннадцатый
            назад
            наиболее
            недавно
            миллионов
            недалеко
            между
            низко
            меля
            нельзя
            нибудь
            непрерывно
            наконец
            никогда
            ник [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Spanish">
             <summary>
               Looks up a localized string similar to ésa
            ésta
            éste
            última
            últimas
            último
            últimos
            aún
            a
            la
            vez
            a.m.
            abierto
            abunda
            acaba
            además
            ahora
            al
            algún
            alguna
            alguno
            alrededor
            alta
            altas
            alto
            altos
            am
            ambas
            ambos
            antes
            aquél
            aquélla
            aquí
            aquel
            aquella
            aquellas
            aquello
            aquellos
            así
            atardecer
            aunque
            básicamente
            b
            c
            cada
            casi
            celebran
            centro
            cercanía
            cierta
            ciertas
            cierto
            ciertos
            común
            comúnmente
            como
            complemento
            complementos
            completamente
            comunes
            con
            conforme
            considerable
            considerada
            consider [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Swedish">
             <summary>
               Looks up a localized string similar to aderton
            adertonde
            adjö
            aldrig
            alla
            allas
            allt
            alltid
            alltså
            än
            andra
            andras
            annan
            annat
            ännu
            artonde
            arton
            åtminstone
            att
            åtta
            åttio
            åttionde
            åttonde
            av
            även
            båda
            bådas
            bakom
            bara
            bäst
            bättre
            behöva
            behövas
            behövde
            behövt
            beslut
            beslutat
            beslutit
            bland
            blev
            bli
            blir
            blivit
            bort
            borta
            bra
            då
            dag
            dagar
            dagarna
            dagen
            där
            därför
            de
            del
            delen
            dem
            den
            deras
            dess
            det
            detta
            dig
            din
            dina
            dit
            ditt
            dock
            du
            efter
            eftersom
            elfte
            eller
            elva
            en
            enk [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.UngroupTransform">
            <summary>
        Un-groups vector columns into sequences of rows, inverse of Group transform.
       </summary><remarks>
        <para>This can be thought of as an inverse of the <see cref="T:Microsoft.ML.Transforms.CombinerByContiguousGroupId" />.  
        For all specified vector columns ("pivot" columns), performs the "ungroup" (or "unroll") operation as outlined below.
        </para>
        <para>If the only pivot column is called P, and has size K, then for every row of the input we will produce 
         K rows, that are identical in all columns except P. The column P will become a scalar column, and this 
         column will hold all the original values of input's P, one value per row, in order. The order of columns 
         will remain the same.
        </para>
        <para>Variable-length pivot columns are supported (including zero, which will eliminate the row from the result).</para>
        <para>Multiple pivot columns are also supported:</para>
        <list type="bullet">
          <item><description>A number of output rows is controlled by the 'mode' parameter. 
            <list type="bullet">
              <item><term>outer</term><description> it is equal to the maximum length of pivot columns</description></item>
              <item><term>inner</term><description> it is equal to the minimum length of pivot columns</description></item>
              <item><term>first</term><description> it is equal to the length of the first pivot column</description></item>
            </list>
            </description>
          </item>
          <item><description>
              If a particular pivot column has size that is different than the number of output rows, the extra slots will
              be ignored, and the missing slots will be 'padded' with default values.
            </description></item>
        </list>
        <para>All metadata are preserved for the retained columns. For 'unrolled' columns, all known metadata
        except slot names are preserved.
        </para>
      </remarks>
        </member>
        <member name="T:Microsoft.ML.Transforms.UngroupTransform.UngroupMode">
            <summary>
            Controls the number of output rows produced by the <see cref="T:Microsoft.ML.Transforms.UngroupTransform"/> transform
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.UngroupTransform.UngroupMode.Inner">
            <summary>
            The number of output rows is equal to the minimum length of pivot columns
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.UngroupTransform.UngroupMode.Outer">
            <summary>
            The number of output rows is equal to the maximum length of pivot columns
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.UngroupTransform.UngroupMode.First">
            <summary>
            The number of output rows is equal to the length of the first pivot column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.UngroupTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.Data.IDataView,Microsoft.ML.Transforms.UngroupTransform.UngroupMode,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.UngroupTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.Runtime.Data.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="mode">Specifies how to unroll multiple pivot columns of different size.</param>
            <param name="columns">Columns to unroll, or 'pivot'</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.UngroupTransform.SchemaImpl.GetActiveInput(System.Func{System.Int32,System.Boolean})">
            <summary>
            Return an array of active input columns given the target predicate.
            </summary>
        </member>
        <member name="T:Microsoft.ML.CategoricalCatalog">
            <summary>
            Static extensions for categorical transforms.
            </summary>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotEncoding(Microsoft.ML.Runtime.TransformsCatalog.CategoricalTransforms,System.String,System.String,Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.OutputKind)">
            <summary>
            Convert a text column into one-hot encoded vector.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="inputColumn">The input column</param>
            <param name="outputColumn">The output column. If <c>null</c>, <paramref name="inputColumn"/> is used.</param>
            <param name="outputKind">The conversion mode.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotEncoding(Microsoft.ML.Runtime.TransformsCatalog.CategoricalTransforms,Microsoft.ML.Transforms.Categorical.OneHotEncodingEstimator.ColumnInfo[])">
            <summary>
            Convert several text column into one-hot encoded vectors.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="columns">The column settings.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotHashEncoding(Microsoft.ML.Runtime.TransformsCatalog.CategoricalTransforms,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.Categorical.OneHotEncodingTransformer.OutputKind)">
            <summary>
            Convert a text column into hash-based one-hot encoded vector.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="inputColumn">The input column</param>
            <param name="outputColumn">The output column. If <c>null</c>, <paramref name="inputColumn"/> is used.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
            <param name="outputKind">The conversion mode.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotHashEncoding(Microsoft.ML.Runtime.TransformsCatalog.CategoricalTransforms,Microsoft.ML.Transforms.Categorical.OneHotHashEncodingEstimator.ColumnInfo[])">
            <summary>
            Convert several text column into hash-based one-hot encoded vectors.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="columns">The column settings.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.ConversionsCatalog">
            <summary>
            Extensions for the <see cref="T:Microsoft.ML.Runtime.TransformsCatalog.ConversionTransforms"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.ConversionsCatalog.MapKeyToBinaryVector(Microsoft.ML.Runtime.TransformsCatalog.ConversionTransforms,Microsoft.ML.Transforms.Conversions.KeyToBinaryVectorMappingTransformer.ColumnInfo[])">
            <summary>
             Convert the key types back to binary verctor.
            </summary>
            <param name="catalog">The categorical transform's catalog.</param>
            <param name="columns">The input column.</param>
        </member>
        <member name="M:Microsoft.ML.ConversionsCatalog.MapKeyToBinaryVector(Microsoft.ML.Runtime.TransformsCatalog.ConversionTransforms,System.String,System.String)">
            <summary>
             Convert the key types back to binary verctor.
            </summary>
            <param name="catalog">The categorical transform's catalog.</param>
            <param name="inputColumn">The name of the input column of the transformation.</param>
            <param name="outputColumn">The name of the column produced by the transformation.</param>
        </member>
        <member name="M:Microsoft.ML.ExtensionsCatalog.IndicateMissingValues(Microsoft.ML.Runtime.TransformsCatalog,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Creates a new output column, of boolean type, with the same number of slots as the input column. The value in the output column
            is true if the value in the input column is missing.
            </summary>
            <param name="catalog">The transform extensions' catalog.</param>
            <param name="columns">The names of the input columns of the transformation and the corresponding names for the output columns.</param>
        </member>
        <member name="M:Microsoft.ML.ExtensionsCatalog.IndicateMissingValues(Microsoft.ML.Runtime.TransformsCatalog,System.String,System.String)">
            <summary>
            Creates a new output column, or replaces the inputColumn with a new column
            (depending on whether the <paramref name="outputColumn"/> is given a value, or left to null)
            of boolean type, with the same number of slots as the input column. The value in the output column
            is true if the value in the input column is missing.
            </summary>
            <param name="catalog">The transform extensions' catalog.</param>
            <param name="inputColumn">The name of the input column of the transformation.</param>
            <param name="outputColumn">The name of the optional column produced by the transformation.
            If left to <value>null</value> the <paramref name="inputColumn"/> will get replaced.</param>
        </member>
        <member name="M:Microsoft.ML.ExtensionsCatalog.ReplaceMissingValues(Microsoft.ML.Runtime.TransformsCatalog,System.String,System.String,Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode)">
            <summary>
            Creates a new output column, or replaces the inputColumn with a new column
            (depending on whether the <paramref name="outputColumn"/> is given a value, or left to null)
            identical to the input column for everything but the missing values. The missing values of the input column, in this new column are replaced with
            one of the values specifid in the <paramref name="replacementKind"/>. The default for the <paramref name="replacementKind"/> is
            <see cref="F:Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode.DefaultValue"/>.
            </summary>
            <param name="catalog">The transform extensions' catalog.</param>
            <param name="inputColumn">The name of the input column.</param>
            <param name="outputColumn">The optional name of the output column,
            If not provided, the <paramref name="inputColumn"/> will be replaced with the results of the transforms.</param>
            <param name="replacementKind">The type of replacement to use as specified in <see cref="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode"/></param>
        </member>
        <member name="M:Microsoft.ML.ExtensionsCatalog.ReplaceMissingValues(Microsoft.ML.Runtime.TransformsCatalog,Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo[])">
            <summary>
            Creates a new output column, identical to the input column for everything but the missing values.
            The missing values of the input column, in this new column are replaced with <see cref="F:Microsoft.ML.Transforms.MissingValueReplacingTransformer.ColumnInfo.ReplacementMode.DefaultValue"/>.
            </summary>
            <param name="catalog">The transform extensions' catalog.</param>
            <param name="columns">The name of the columns to use, and per-column transformation configuraiton.</param>
        </member>
        <member name="M:Microsoft.ML.FeatureSelectionCatalog.SelectFeaturesBasedOnMutualInformation(Microsoft.ML.Runtime.TransformsCatalog.FeatureSelectionTransforms,System.String,System.Int32,System.Int32,System.ValueTuple{System.String,System.String}[])">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="catalog">The transform's catalog.</param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <param name="columns">Specifies the names of the input columns for the transformation, and their respective output column names.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnMutualInformation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.FeatureSelectionCatalog.SelectFeaturesBasedOnMutualInformation(Microsoft.ML.Runtime.TransformsCatalog.FeatureSelectionTransforms,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="catalog">The transform's catalog.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the column resulting from the transformation of <paramref name="inputColumn" />. Null means <paramref name="inputColumn" /> is replaced. </param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnMutualInformation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.FeatureSelectionCatalog.SelectFeaturesBasedOnCount(Microsoft.ML.Runtime.TransformsCatalog.FeatureSelectionTransforms,Microsoft.ML.Transforms.FeatureSelection.CountFeatureSelectingEstimator.ColumnInfo[])">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.FeatureSelection.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns">Describes the parameters of the feature selection process for each column pair.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnCount](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.FeatureSelectionCatalog.SelectFeaturesBasedOnCount(Microsoft.ML.Runtime.TransformsCatalog.FeatureSelectionTransforms,System.String,System.String,System.Int64)">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.FeatureSelection.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="catalog">The transform's catalog.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the column resulting from the transformation of <paramref name="inputColumn" />. Null means <paramref name="inputColumn" /> is replaced. </param>
            <param name="count">If the count of non-default values for a slot is greater than or equal to this threshold in the training data, the slot is preserved.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnCount](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance(Microsoft.ML.RegressionContext,Microsoft.ML.Runtime.IPredictionTransformer{Microsoft.ML.Runtime.IPredictor},Microsoft.ML.Runtime.Data.IDataView,System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Permutation Feature Importance (PFI) for Regression
            </summary>
            <remarks>
            <para>
            Permutation feature importance (PFI) is a technique to determine the global importance of features in a trained
            machine learning model. PFI is a simple yet powerful technique motivated by Breiman in his Random Forest paper, section 10
            (Breiman. <a href='https://www.stat.berkeley.edu/~breiman/randomforest2001.pdf'>&quot;Random Forests.&quot;</a> Machine Learning, 2001.)
            The advantage of the PFI method is that it is model agnostic -- it works with any model that can be
            evaluated -- and it can use any dataset, not just the training set, to compute feature importance metrics.
            </para>
            <para>
            PFI works by taking a labeled dataset, choosing a feature, and permuting the values
            for that feature across all the examples, so that each example now has a random value for the feature and
            the original values for all other features. The evalution metric (e.g. AUC or R-squared) is then calculated
            for this modified dataset, and the change in the evaluation metric from the original dataset is computed.
            The larger the change in the evaluation metric, the more important the feature is to the model.
            PFI works by performing this permutation analysis across all the features of a model, one after another.
            </para>
            <para>
            In this implementation, PFI computes the change in all possible regression evaluation metrics for each feature, and an
            <code>ImmutableArray</code> of <code>RegressionMetrics</code> objects is returned. See the sample below for an
            example of working with these results to analyze the feature importance of a model.
            </para>
            </remarks>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[PFI](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/PermutationFeatureImportance.cs)]
            ]]>
            </format>
            </example>
            <param name="ctx">The regression context.</param>
            <param name="model">The model to evaluate.</param>
            <param name="data">The evaluation data set.</param>
            <param name="label">Label column name.</param>
            <param name="features">Feature column names.</param>
            <param name="useFeatureWeightFilter">Use features weight to pre-filter features.</param>
            <param name="topExamples">Limit the number of examples to evaluate on. null means examples (up to ~ 2 bln) from input will be used.</param>
            <returns>Array of per-feature 'contributions' to the score.</returns>
        </member>
        <member name="M:Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance(Microsoft.ML.BinaryClassificationContext,Microsoft.ML.Runtime.IPredictionTransformer{Microsoft.ML.Runtime.IPredictor},Microsoft.ML.Runtime.Data.IDataView,System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Permutation Feature Importance (PFI) for Binary Classification
            </summary>
            <remarks>
            <para>
            Permutation feature importance (PFI) is a technique to determine the global importance of features in a trained
            machine learning model. PFI is a simple yet powerful technique motivated by Breiman in his Random Forest paper, section 10
            (Breiman. <a href='https://www.stat.berkeley.edu/~breiman/randomforest2001.pdf'>&quot;Random Forests.&quot;</a> Machine Learning, 2001.)
            The advantage of the PFI method is that it is model agnostic -- it works with any model that can be
            evaluated -- and it can use any dataset, not just the training set, to compute feature importance metrics.
            </para>
            <para>
            PFI works by taking a labeled dataset, choosing a feature, and permuting the values
            for that feature across all the examples, so that each example now has a random value for the feature and
            the original values for all other features. The evalution metric (e.g. AUC or R-squared) is then calculated
            for this modified dataset, and the change in the evaluation metric from the original dataset is computed.
            The larger the change in the evaluation metric, the more important the feature is to the model.
            PFI works by performing this permutation analysis across all the features of a model, one after another.
            </para>
            <para>
            In this implementation, PFI computes the change in all possible binary classification evaluation metrics for each feature, and an
            <code>ImmutableArray</code> of <code>BinaryClassificationMetrics</code> objects is returned. See the sample below for an
            example of working with these results to analyze the feature importance of a model.
            </para>
            </remarks>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[PFI](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/PermutationFeatureImportance.cs)]
            ]]>
            </format>
            </example>
            <param name="ctx">The binary classification context.</param>
            <param name="model">The model to evaluate.</param>
            <param name="data">The evaluation data set.</param>
            <param name="label">Label column name.</param>
            <param name="features">Feature column names.</param>
            <param name="useFeatureWeightFilter">Use features weight to pre-filter features.</param>
            <param name="topExamples">Limit the number of examples to evaluate on. null means examples (up to ~ 2 bln) from input will be used.</param>
            <returns>Array of per-feature 'contributions' to the score.</returns>
        </member>
        <member name="M:Microsoft.ML.ProjectionCatalog.CreateRandomFourierFeatures(Microsoft.ML.Runtime.TransformsCatalog.ProjectionTransforms,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Takes column filled with a vector of floats and maps its to a random low-dimensional feature space.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="inputColumn">Name of the column to be transformed.</param>
            <param name="outputColumn">Name of the output column. If this is null '<paramref name="inputColumn"/>' will be used.</param>
            <param name="newDim">The number of random Fourier features to create.</param>
            <param name="useSin">Create two features for every random Fourier frequency? (one for cos and one for sin).</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CreateRandomFourierFeatures](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/ProjectionTransforms.cs?range=1-6,12-112)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ProjectionCatalog.CreateRandomFourierFeatures(Microsoft.ML.Runtime.TransformsCatalog.ProjectionTransforms,Microsoft.ML.Transforms.Projections.RandomFourierFeaturizingTransformer.ColumnInfo[])">
            <summary>
            Takes columns filled with a vector of floats and maps its to a random low-dimensional feature space.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns">The input columns to use for the transformation.</param>
        </member>
        <member name="M:Microsoft.ML.ProjectionCatalog.LpNormalize(Microsoft.ML.Runtime.TransformsCatalog.ProjectionTransforms,System.String,System.String,Microsoft.ML.Transforms.Projections.LpNormalizingEstimatorBase.NormalizerKind,System.Boolean)">
            <summary>
            Takes column filled with a vector of floats and computes L-p norm of it.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the column resulting from the transformation of <paramref name="inputColumn"/>. Null means <paramref name="inputColumn"/> is replaced. </param>
            <param name="normKind">Type of norm to use to normalize each sample.</param>
            <param name="subMean">Subtract mean from each value before normalizing.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LpNormalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/ProjectionTransforms.cs?range=1-6,12-112)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ProjectionCatalog.LpNormalize(Microsoft.ML.Runtime.TransformsCatalog.ProjectionTransforms,Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.LpNormColumnInfo[])">
            <summary>
            Takes columns filled with a vector of floats and computes L-p norm of it.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns"> Describes the parameters of the lp-normalization process for each column pair.</param>
        </member>
        <member name="M:Microsoft.ML.ProjectionCatalog.GlobalContrastNormalize(Microsoft.ML.Runtime.TransformsCatalog.ProjectionTransforms,System.String,System.String,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Takes column filled with a vector of floats and computes global contrast normalization of it.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="inputColumn">Name of the input column.</param>
            <param name="outputColumn">Name of the column resulting from the transformation of <paramref name="inputColumn"/>. Null means <paramref name="inputColumn"/> is replaced. </param>
            <param name="substractMean">Subtract mean from each value before normalizing.</param>
            <param name="useStdDev">Normalize by standard deviation rather than L2 norm.</param>
            <param name="scale">Scale features by this value.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[GlobalContrastNormalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/ProjectionTransforms.cs?range=1-6,12-112)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ProjectionCatalog.GlobalContrastNormalize(Microsoft.ML.Runtime.TransformsCatalog.ProjectionTransforms,Microsoft.ML.Transforms.Projections.LpNormalizingTransformer.GcnColumnInfo[])">
            <summary>
            Takes columns filled with a vector of floats and computes global contrast normalization of it.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns"> Describes the parameters of the gcn-normaliztion process for each column pair.</param>
        </member>
        <member name="T:Microsoft.ML.Runtime.Data.NgramIdFinder">
            <summary>
            This delegate represents a function that gets an ngram as input, and outputs the id of
            the ngram and whether or not to continue processing ngrams.
            </summary>
            <param name="ngram">The array containing the ngram</param>
            <param name="lim">The ngram is stored in ngram[0],...ngram[lim-1].</param>
            <param name="icol">The index of the column the transform is applied to.</param>
            <param name="more">True if processing should continue, false if it should stop.
            It is true on input, so only needs to be set to false.</param>
            <returns>The ngram slot if it was found, -1 otherwise.</returns>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.LdaFitResult">
            <summary>
            Information on the result of fitting a LDA transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.LdaFitResult.OnFit">
            <summary>
            For user defined delegates that accept instances of the containing type.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.LdaStaticExtensions.ToLdaTopicVector(Microsoft.ML.StaticPipe.Vector{System.Single},System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Microsoft.ML.StaticPipe.LdaFitResult.OnFit)">
            <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary><remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para>
        <para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a>
        </para>
        <para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet">
            <item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item>
            <item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item>
          </list>
        </para>
      </remarks>
            <param name="input">A vector of floats representing the document.</param>
            <param name="numTopic">The number of topics.</param>
            <param name="alphaSum">Dirichlet prior on document-topic vectors.</param>
            <param name="beta">Dirichlet prior on vocab-topic vectors.</param>
            <param name="mhstep">Number of Metropolis Hasting step.</param>
            <param name="numIterations">Number of iterations.</param>
            <param name="likelihoodInterval">Compute log likelihood over local dataset on this iteration interval.</param>
            <param name="numThreads">The number of training threads. Default value depends on number of logical processors.</param>
            <param name="numMaxDocToken">The threshold of maximum count of tokens per doc.</param>
            <param name="numSummaryTermPerTopic">The number of words to summarize the topic.</param>
            <param name="numBurninIterations">The number of burn-in iterations.</param>
            <param name="resetRandomGenerator">Reset the random number generator for each document.</param>
            <param name="onFit">Called upon fitting with the learnt enumeration on the dataset.</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.WordTokenizerExtensions">
            <summary>
            Extensions for statically typed word tokenizer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.WordTokenizerExtensions.TokenizeText(Microsoft.ML.StaticPipe.Scalar{System.String},System.Char[])">
            <summary>
            Tokenize incoming text using <paramref name="separators"/> and output the tokens.
            </summary>
            <param name="input">The column to apply to.</param>
            <param name="separators">The separators to use (uses space character by default).</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.CharacterTokenizerExtensions">
            <summary>
            Extensions for statically typed character tokenizer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.CharacterTokenizerExtensions.TokenizeIntoCharacters(Microsoft.ML.StaticPipe.Scalar{System.String},System.Boolean)">
            <summary>
            Tokenize incoming text into a sequence of characters.
            </summary>
            <param name="input">The column to apply to.</param>
            <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.StopwordRemoverExtensions">
            <summary>
            Extensions for statically typed stop word remover.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.StopwordRemoverExtensions.RemoveStopwords(Microsoft.ML.StaticPipe.VarVector{System.String},Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)">
            <summary>
            Remove stop words from incoming text.
            </summary>
            <param name="input">The column to apply to.</param>
            <param name="language">Langauge of the input text.</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.TextNormalizerExtensions">
            <summary>
            Extensions for statically typed text normalizer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.TextNormalizerExtensions.NormalizeText(Microsoft.ML.StaticPipe.Scalar{System.String},Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseNormalizationMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Normalizes input text by changing case, removing diacritical marks, punctuation marks and/or numbers.
            </summary>
            <param name="input">The column to apply to.</param>
            <param name="textCase">Casing text using the rules of the invariant culture.</param>
            <param name="keepDiacritics">Whether to keep diacritical marks or remove them.</param>
            <param name="keepPunctuations">Whether to keep punctuation marks or remove them.</param>
            <param name="keepNumbers">Whether to keep numbers or remove them.</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.WordBagEstimatorExtensions">
            <summary>
            Extensions for statically typed bag of word converter.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.WordBagEstimatorExtensions.ToBagofWords(Microsoft.ML.StaticPipe.Scalar{System.String},System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words ) in a given text.
            It does so by building a dictionary of ngrams and using the id in the dictionary as the index in the bag.
            </summary>
            <param name="input">The column to apply to.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.WordHashBagEstimatorExtensions">
            <summary>
            Extensions for statically typed bag of wordhash converter.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.WordHashBagEstimatorExtensions.ToBagofHashedWords(Microsoft.ML.StaticPipe.Scalar{System.String},System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words of length 1-n) in a given text.
            It does so by hashing each ngram and using the hash value as the index in the bag.
            </summary>
            <param name="input">The column to apply to.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.NgramEstimatorExtensions">
            <summary>
            Extensions for statically typed ngram estimator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.NgramEstimatorExtensions.ToNgrams``1(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{``0,System.String}},System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
             <summary>
             Produces a bag of counts of ngrams (sequences of consecutive words ) in a given tokenized text.
             It does so by building a dictionary of ngrams and using the id in the dictionary as the index in the bag.
            
             /// <see cref="M:Microsoft.ML.StaticPipe.NgramEstimatorExtensions.ToNgrams``1(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{``0,System.String}},System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)"/> is different from <see cref="M:Microsoft.ML.StaticPipe.WordBagEstimatorExtensions.ToBagofWords(Microsoft.ML.StaticPipe.Scalar{System.String},System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)"/>
             in a way that <see cref="M:Microsoft.ML.StaticPipe.NgramEstimatorExtensions.ToNgrams``1(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{``0,System.String}},System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)"/> takes tokenized text as input while <see cref="M:Microsoft.ML.StaticPipe.WordBagEstimatorExtensions.ToBagofWords(Microsoft.ML.StaticPipe.Scalar{System.String},System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)"/> tokenizes text internally.
             </summary>
             <param name="input">The column to apply to.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
             <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.NgramHashEstimatorExtensions">
            <summary>
            Extensions for statically typed ngram hash estimator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.NgramHashEstimatorExtensions.ToNgramsHash(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{System.UInt32,System.String}},System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
             <summary>
             Produces a bag of counts of ngrams (sequences of consecutive words of length 1-n) in a given tokenized text.
             It does so by hashing each ngram and using the hash value as the index in the bag.
            
             <see cref="M:Microsoft.ML.StaticPipe.NgramHashEstimatorExtensions.ToNgramsHash(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{System.UInt32,System.String}},System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)"/> is different from <see cref="M:Microsoft.ML.StaticPipe.WordHashBagEstimatorExtensions.ToBagofHashedWords(Microsoft.ML.StaticPipe.Scalar{System.String},System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)"/>
             in a way that <see cref="M:Microsoft.ML.StaticPipe.NgramHashEstimatorExtensions.ToNgramsHash(Microsoft.ML.StaticPipe.VarVector{Microsoft.ML.StaticPipe.Key{System.UInt32,System.String}},System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)"/> takes tokenized text as input while <see cref="M:Microsoft.ML.StaticPipe.WordHashBagEstimatorExtensions.ToBagofHashedWords(Microsoft.ML.StaticPipe.Scalar{System.String},System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)"/> tokenizes text internally.
             </summary>
             <param name="input">The column to apply to.</param>
             <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.LpNormalizerExtensions">
            <summary>
            Extensions for statically typed <see cref="T:Microsoft.ML.Transforms.Projections.LpNormalizingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.LpNormalizerExtensions.LpNormalize(Microsoft.ML.StaticPipe.Vector{System.Single},Microsoft.ML.Transforms.Projections.LpNormalizingEstimatorBase.NormalizerKind,System.Boolean)">
            <summary>
         The LpNormalizer transforms, normalizes vectors (rows) individually by rescaling them to unit norm (L2, L1 or LInf). 
         <para>Performs the following operation on a vector X:</para> 
         <para>Y = (X - M) / D</para> 
         <para>where M is mean and D is either L2 norm, L1 norm or LInf norm.</para>
       </summary><remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf" />
      </remarks><seealso cref="T:Microsoft.ML.Transforms.Projections.GlobalContrastNormalizingEstimator" /><example>
        <code language="csharp">
          pipeline.Add(new LpNormalizer("FeatureCol")
          { 
              NormKind = LpNormNormalizerTransformNormalizerKind.L1Norm
          });
        </code>
      </example>
            <param name="input">The column to apply to.</param>
            <param name="normKind">Type of norm to use to normalize each sample.</param>
            <param name="subMean">Subtract mean from each value before normalizing.</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.GlobalContrastNormalizerExtensions">
            <summary>
            Extensions for statically typed <see cref="T:Microsoft.ML.Transforms.Projections.GlobalContrastNormalizingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.GlobalContrastNormalizerExtensions.GlobalContrastNormalize(Microsoft.ML.StaticPipe.Vector{System.Single},System.Boolean,System.Boolean,System.Single)">
            <summary>
        <para>Performs a global contrast normalization on input values:</para>
        <para>Y = (s * X - M) / D</para> 
        <para>where s is a scale, M is mean and D is either the L2 norm or standard deviation.</para>
       </summary><remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: 
        <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf">An Analysis of Single-Layer Networks in Unsupervised Feature Learning</a>
      </remarks><seealso cref="T:Microsoft.ML.Transforms.Projections.LpNormalizingEstimator" /><example>
        <code language="csharp">
          pipeline.Add(new GlobalContrastNormalizer("FeatureCol")
          { 
              SubMean= false
          });
        </code>
      </example>
            <param name="input">The column to apply to.</param>
            <param name="subMean">Subtract mean from each value before normalizing.</param>
            <param name="useStdDev">Normalize by standard deviation rather than L2 norm.</param>
            <param name="scale">Scale features by this value.</param>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.MutualInformationFeatureSelectorExtensions">
            <summary>
            Extensions for statically typed <see cref="T:Microsoft.ML.StaticPipe.MutualInformationFeatureSelectorExtensions"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.MutualInformationFeatureSelectorExtensions.SelectFeaturesBasedOnMutualInformation(Microsoft.ML.StaticPipe.Vector{System.Single},Microsoft.ML.StaticPipe.Scalar{System.Boolean},System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="input">Name of the input column.</param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnMutualInformation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Static/FeatureSelectionTransform.cs?range=1-5,9-120)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.MutualInformationFeatureSelectorExtensions.SelectFeaturesBasedOnMutualInformation(Microsoft.ML.StaticPipe.Vector{System.Single},Microsoft.ML.StaticPipe.Scalar{System.Single},System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="input">Name of the input column.</param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnMutualInformation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Static/FeatureSelectionTransform.cs?range=1-5,9-120)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.MutualInformationFeatureSelectorExtensions.SelectFeaturesBasedOnMutualInformation(Microsoft.ML.StaticPipe.Vector{System.Double},Microsoft.ML.StaticPipe.Scalar{System.Boolean},System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="input">Name of the input column.</param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnMutualInformation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Static/FeatureSelectionTransform.cs?range=1-5,9-120)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.MutualInformationFeatureSelectorExtensions.SelectFeaturesBasedOnMutualInformation(Microsoft.ML.StaticPipe.Vector{System.Double},Microsoft.ML.StaticPipe.Scalar{System.Single},System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="input">Name of the input column.</param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnMutualInformation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Static/FeatureSelectionTransform.cs?range=1-5,9-120)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.MutualInformationFeatureSelectorExtensions.SelectFeaturesBasedOnMutualInformation(Microsoft.ML.StaticPipe.Vector{System.Boolean},Microsoft.ML.StaticPipe.Scalar{System.Boolean},System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="input">Name of the input column.</param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnMutualInformation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Static/FeatureSelectionTransform.cs?range=1-5,9-120)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.MutualInformationFeatureSelectorExtensions.SelectFeaturesBasedOnMutualInformation(Microsoft.ML.StaticPipe.Vector{System.Boolean},Microsoft.ML.StaticPipe.Scalar{System.Single},System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="input">Name of the input column.</param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnMutualInformation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Static/FeatureSelectionTransform.cs?range=1-5,9-120)]
            ]]>
            </format>
            </example>
        </member>
        <member name="T:Microsoft.ML.StaticPipe.CountFeatureSelectorExtensions">
            <summary>
            Extensions for statically typed <see cref="T:Microsoft.ML.StaticPipe.CountFeatureSelectorExtensions"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.CountFeatureSelectorExtensions.SelectFeaturesBasedOnCount(Microsoft.ML.StaticPipe.Vector{System.Single},System.Int64)">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.FeatureSelection.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="input">Name of the input column.</param>
            <param name="count">If the count of non-default values for a slot is greater than or equal to this threshold, the slot is preserved.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnCount](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Static/FeatureSelectionTransform.cs?range=1-5,9-120)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.CountFeatureSelectorExtensions.SelectFeaturesBasedOnCount(Microsoft.ML.StaticPipe.Vector{System.Double},System.Int64)">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.FeatureSelection.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="input">Name of the input column.</param>
            <param name="count">If the count of non-default values for a slot is greater than or equal to this threshold, the slot is preserved.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnCount](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Static/FeatureSelectionTransform.cs?range=1-5,9-120)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.CountFeatureSelectorExtensions.SelectFeaturesBasedOnCount(Microsoft.ML.StaticPipe.Vector{System.String},System.Int64)">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.FeatureSelection.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="input">Name of the input column.</param>
            <param name="count">If the count of non-default values for a slot is greater than or equal to this threshold, the slot is preserved.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnCount](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Static/FeatureSelectionTransform.cs?range=1-5,9-120)]
            ]]>
            </format>
            </example>
        </member>
        <member name="F:Microsoft.ML.StaticPipe.CategoricalStaticExtensions.OneHotVectorOutputKind.Bag">
            <summary>
            Output is a bag (multi-set) vector
            </summary>
        </member>
        <member name="F:Microsoft.ML.StaticPipe.CategoricalStaticExtensions.OneHotVectorOutputKind.Ind">
            <summary>
            Output is an indicator vector
            </summary>
        </member>
        <member name="F:Microsoft.ML.StaticPipe.CategoricalStaticExtensions.OneHotVectorOutputKind.Bin">
            <summary>
            Output is binary encoded
            </summary>
        </member>
        <member name="F:Microsoft.ML.StaticPipe.CategoricalStaticExtensions.OneHotScalarOutputKind.Ind">
            <summary>
            Output is an indicator vector
            </summary>
        </member>
        <member name="F:Microsoft.ML.StaticPipe.CategoricalStaticExtensions.OneHotScalarOutputKind.Bin">
            <summary>
            Output is binary encoded
            </summary>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.CategoricalStaticExtensions.OneHotEncoding(Microsoft.ML.StaticPipe.Scalar{System.String},Microsoft.ML.StaticPipe.CategoricalStaticExtensions.OneHotScalarOutputKind,Microsoft.ML.Transforms.Conversions.KeyValueOrder,System.Int32,Microsoft.ML.Transforms.Conversions.ToKeyFitResult{System.ReadOnlyMemory{System.Char}}.OnFit)">
            <summary>
            Converts the categorical value into an indicator array by building a dictionary of categories based on the data and using the id in the dictionary as the index in the array.
            </summary>
            <param name="input">Incoming data.</param>
            <param name="outputKind">Specify the output type of indicator array: array or binary encoded data.</param>
            <param name="order">How the Id for each value would be assigined: by occurrence or by value.</param>
            <param name="maxItems">Maximum number of ids to keep during data scanning.</param>
            <param name="onFit">Called upon fitting with the learnt enumeration on the dataset.</param>
        </member>
        <member name="M:Microsoft.ML.StaticPipe.CategoricalStaticExtensions.OneHotEncoding(Microsoft.ML.StaticPipe.Vector{System.String},Microsoft.ML.StaticPipe.CategoricalStaticExtensions.OneHotVectorOutputKind,Microsoft.ML.Transforms.Conversions.KeyValueOrder,System.Int32,Microsoft.ML.Transforms.Conversions.ToKeyFitResult{System.ReadOnlyMemory{System.Char}}.OnFit)">
            <summary>
            Converts the categorical value into an indicator array by building a dictionary of categories based on the data and using the id in the dictionary as the index in the array.
            </summary>
            <param name="input">Incoming data.</param>
            <param name="outputKind">Specify the output type of indicator array: Multiarray, array or binary encoded data.</param>
            <param name="order">How the Id for each value would be assigined: by occurrence or by value.</param>
            <param name="maxItems">Maximum number of ids to keep during data scanning.</param>
            <param name="onFit">Called upon fitting with the learnt enumeration on the dataset.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.FeaturizeText(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Action{Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Settings})">
            <summary>
            Transform a text column into featurized float array that represents counts of ngrams and char-grams.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumn">The input column</param>
            <param name="outputColumn">The output column</param>
            <param name="advancedSettings">Advanced transform settings</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[FeaturizeText](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/TextTransform.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.FeaturizeText(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Settings})">
            <summary>
            Transform several text columns into featurized float array that represents counts of ngrams and char-grams.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumns">The input columns</param>
            <param name="outputColumn">The output column</param>
            <param name="advancedSettings">Advanced transform settings</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.TokenizeCharacters(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Boolean)">
            <summary>
            Tokenize incoming text in <paramref name="inputColumn"/> and output the tokens as <paramref name="outputColumn"/>.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumn">The column containing text to tokenize.</param>
            <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.TokenizeCharacters(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.Boolean,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Tokenize incoming text in input columns and output the tokens as output columns.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="useMarkerCharacters">Whether to use marker characters to separate words.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.NormalizeText(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseNormalizationMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Normalizes incoming text in <paramref name="inputColumn"/> by changing case, removing diacritical marks, punctuation marks and/or numbers
            and outputs new text as <paramref name="outputColumn"/>.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumn">The column containing text to normalize.</param>
            <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="textCase">Casing text using the rules of the invariant culture.</param>
            <param name="keepDiacritics">Whether to keep diacritical marks or remove them.</param>
            <param name="keepPunctuations">Whether to keep punctuation marks or remove them.</param>
            <param name="keepNumbers">Whether to keep numbers or remove them.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ExtractWordEmbeddings(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind)">
            <summary>
            Extracts word embeddings.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumn">The input column.</param>
            <param name="outputColumn">The optional output column. If it is <value>null</value> the input column will be substituted with its value.</param>
            <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind"/> to use. </param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ExtractWordEmbeddings(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.String)">
            <summary>
            Extracts word embeddings.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumn">The input column.</param>
            <param name="outputColumn">The optional output column. If it is <value>null</value> the input column will be substituted with its value.</param>
            <param name="customModelFile">The path of the pre-trained embeedings model to use. </param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ExtractWordEmbeddings(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind,Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.ColumnInfo[])">
            <summary>
            Extracts word embeddings.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingsExtractingTransformer.PretrainedModelKind"/> to use. </param>
            <param name="columns">The array columns, and per-column configurations to extract embeedings from.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.TokenizeWords(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Char[])">
            <summary>
            Tokenizes incoming text in <paramref name="inputColumn"/>, using <paramref name="separators"/> as separators,
            and outputs the tokens as <paramref name="outputColumn"/>.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumn">The column containing text to tokenize.</param>
            <param name="outputColumn">The column containing output tokens. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="separators">The separators to use (uses space character by default).</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.TokenizeWords(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String,System.String}[],System.Char[])">
            <summary>
            Tokenizes incoming text in input columns and outputs the tokens using <paramref name="separators"/> as separators.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
            <param name="separators">The separators to use (uses space character by default).</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.TokenizeWords(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.WordTokenizingTransformer.ColumnInfo[])">
            <summary>
             Tokenizes incoming text in input columns, using per-column configurations, and outputs the tokens.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumn"/>
            and outputs bag of word vector as <paramref name="outputColumn"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumn">The column containing text to compute bag of word vector.</param>
            <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LpNormalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/NgramExtraction.cs?range=1-5,11-74)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String,System.String}[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="columns">Pairs of columns to compute bag of word vector.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.NgramExtractingTransformer.ColumnInfo[])">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="columns">Pairs of columns to run the ngram process on.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.RemoveStopWords(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)">
            <summary>
            Removes stop words from incoming token streams in <paramref name="inputColumn"/>
            and outputs the token streams without stopwords as <paramref name="outputColumn"/>.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumn">The column containing text to remove stop words on.</param>
            <param name="outputColumn">The column containing output text. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="language">Langauge of the input text column <paramref name="inputColumn"/>.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.RemoveStopWords(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String,System.String}[],Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)">
            <summary>
            Removes stop words from incoming token streams in input columns
            and outputs the token streams without stop words as output columns.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="columns">Pairs of columns to remove stop words on.</param>
            <param name="language">Langauge of the input text columns <paramref name="columns"/>.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumn"/>
            and outputs bag of word vector as <paramref name="outputColumn"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumn">The column containing text to compute bag of word vector.</param>
            <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String[],System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumns"/>
            and outputs bag of word vector as <paramref name="outputColumn"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumns">The columns containing text to compute bag of word vector.</param>
            <param name="outputColumn">The column containing output tokens.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String[],System.String}[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="columns">Pairs of columns to compute bag of word vector.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maxNumTerms">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumn"/>
            and outputs bag of word vector as <paramref name="outputColumn"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumn">The column containing text to compute bag of word vector.</param>
            <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn"/> is replaced.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String[],System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumns"/>
            and outputs bag of word vector as <paramref name="outputColumn"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="inputColumns">The columns containing text to compute bag of word vector.</param>
            <param name="outputColumn">The column containing output tokens.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedWordBags(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String[],System.String}[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="columns">Pairs of columns to compute bag of word vector.</param>
            <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumn"/>
             and outputs ngram vector as <paramref name="outputColumn"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="catalog">The text-related transform's catalog.</param>
             <param name="inputColumn">The column containing text to compute bag of word vector.</param>
             <param name="outputColumn">The column containing bag of word vector. Null means <paramref name="inputColumn"/> is replaced.</param>
             <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String[],System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumns"/>
             and outputs ngram vector as <paramref name="outputColumn"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="catalog">The text-related transform's catalog.</param>
             <param name="inputColumns">The columns containing text to compute bag of word vector.</param>
             <param name="outputColumn">The column containing output tokens.</param>
             <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.ValueTuple{System.String[],System.String}[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="columns.inputs.inputs"/>
             and outputs ngram vector for each output in <paramref name="columns.output.output"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="catalog">The text-related transform's catalog.</param>
             <param name="columns">Pairs of columns to compute bag of word vector.</param>
             <param name="hashBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="allLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="ordered">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="invertHash">Limit the number of keys used to generate the slot name to this many. 0 means no invert hashing, -1 means no limit.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.LatentDirichletAllocation(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Uses <a href="https://arxiv.org/abs/1412.1576">LightLDA</a> to transform a document (represented as a vector of floats)
            into a vector of floats over a set of topics.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="inputColumn">The column representing the document as a vector of floats.</param>
            <param name="outputColumn">The column containing the output scores over a set of topics, represented as a vector of floats. A null value for the column means <paramref name="inputColumn"/> is replaced.</param>
            <param name="numTopic">The number of topics.</param>
            <param name="alphaSum">Dirichlet prior on document-topic vectors.</param>
            <param name="beta">Dirichlet prior on vocab-topic vectors.</param>
            <param name="mhstep">Number of Metropolis Hasting step.</param>
            <param name="numIterations">Number of iterations.</param>
            <param name="likelihoodInterval">Compute log likelihood over local dataset on this iteration interval.</param>
            <param name="numThreads">The number of training threads. Default value depends on number of logical processors.</param>
            <param name="numMaxDocToken">The threshold of maximum count of tokens per doc.</param>
            <param name="numSummaryTermPerTopic">The number of words to summarize the topic.</param>
            <param name="numBurninIterations">The number of burn-in iterations.</param>
            <param name="resetRandomGenerator">Reset the random number generator for each document.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LatentDirichletAllocation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/LdaTransform.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.LatentDirichletAllocation(Microsoft.ML.Runtime.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.ColumnInfo[])">
            <summary>
            Uses <a href="https://arxiv.org/abs/1412.1576">LightLDA</a> to transform a document (represented as a vector of floats)
            into a vector of floats over a set of topics.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns"> Describes the parameters of LDA for each column pair.</param>
        </member>
    </members>
</doc>
